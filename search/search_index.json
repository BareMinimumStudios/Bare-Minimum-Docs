{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Bare Minimum Docs! \u00b6 For Users \u00b6 The documentation for PlayerEx is available here with every aspect of the mod explained in detail. More will be placed here as we add more mods! For Developers \u00b6 The documentation for Data Attributes is available here The documentation for Offline Player Cache is available here A list of all current Fabric API events is also available on this site The entire site is available on Github , where you can submit additions, corrections, or issues you may find.","title":"Home"},{"location":"#welcome-to-the-bare-minimum-docs","text":"","title":"Welcome to the Bare Minimum Docs!"},{"location":"#for-users","text":"The documentation for PlayerEx is available here with every aspect of the mod explained in detail. More will be placed here as we add more mods!","title":"For Users"},{"location":"#for-developers","text":"The documentation for Data Attributes is available here The documentation for Offline Player Cache is available here A list of all current Fabric API events is also available on this site The entire site is available on Github , where you can submit additions, corrections, or issues you may find.","title":"For Developers"},{"location":"fabric-events/","text":"Fabric API Events \u00b6 Fabric API version: 0.96.11+1.20.4 Total event count: 165 Grouped events \u00b6 C2SConfigurationChannelEvents \u00b6 REGISTER UNREGISTER C2SPlayChannelEvents \u00b6 REGISTER UNREGISTER ClientBlockEntityEvents \u00b6 BLOCK_ENTITY_LOAD BLOCK_ENTITY_UNLOAD ClientChunkEvents \u00b6 CHUNK_LOAD CHUNK_UNLOAD ClientConfigurationConnectionEvents \u00b6 INIT READY DISCONNECT ClientEntityEvents \u00b6 ENTITY_LOAD ENTITY_UNLOAD ClientLifecycleEvents \u00b6 CLIENT_STARTED CLIENT_STOPPING ClientLoginConnectionEvents \u00b6 INIT QUERY_START DISCONNECT ClientPlayConnectionEvents \u00b6 INIT JOIN DISCONNECT ClientReceiveMessageEvents \u00b6 ALLOW_CHAT ALLOW_GAME MODIFY_GAME CHAT GAME CHAT_CANCELED GAME_CANCELED ClientSendMessageEvents \u00b6 ALLOW_CHAT ALLOW_COMMAND MODIFY_CHAT MODIFY_COMMAND CHAT COMMAND CHAT_CANCELED COMMAND_CANCELED ClientTickEvents \u00b6 START_CLIENT_TICK END_CLIENT_TICK START_WORLD_TICK END_WORLD_TICK EntityElytraEvents \u00b6 ALLOW CUSTOM EntitySleepEvents \u00b6 ALLOW_SLEEPING START_SLEEPING STOP_SLEEPING ALLOW_BED ALLOW_SLEEP_TIME ALLOW_NEARBY_MONSTERS ALLOW_RESETTING_TIME MODIFY_SLEEPING_DIRECTION ALLOW_SETTING_SPAWN SET_BED_OCCUPATION_STATE MODIFY_WAKE_UP_POSITION EntityTrackingEvents \u00b6 START_TRACKING STOP_TRACKING LootTableEvents \u00b6 REPLACE MODIFY ALL_LOADED ModelLoaderPluginContextImpl \u00b6 modelResolvers onLoadModifiers beforeBakeModifiers afterBakeModifiers legacyVariantProviders PlayerBlockBreakEvents \u00b6 BEFORE AFTER CANCELED S2CConfigurationChannelEvents \u00b6 REGISTER UNREGISTER S2CPlayChannelEvents \u00b6 REGISTER UNREGISTER ScreenEvents \u00b6 BEFORE_INIT AFTER_INIT ServerBlockEntityEvents \u00b6 BLOCK_ENTITY_LOAD BLOCK_ENTITY_UNLOAD ServerChunkEvents \u00b6 CHUNK_LOAD CHUNK_UNLOAD ServerConfigurationConnectionEvents \u00b6 BEFORE_CONFIGURE CONFIGURE DISCONNECT ServerEntityEvents \u00b6 ENTITY_LOAD ENTITY_UNLOAD EQUIPMENT_CHANGE ServerEntityWorldChangeEvents \u00b6 AFTER_ENTITY_CHANGE_WORLD AFTER_PLAYER_CHANGE_WORLD ServerLifecycleEvents \u00b6 SERVER_STARTING SERVER_STARTED SERVER_STOPPING SERVER_STOPPED SYNC_DATA_PACK_CONTENTS START_DATA_PACK_RELOAD END_DATA_PACK_RELOAD BEFORE_SAVE AFTER_SAVE ServerLivingEntityEvents \u00b6 ALLOW_DAMAGE ALLOW_DEATH AFTER_DEATH MOB_CONVERSION ServerLoginConnectionEvents \u00b6 INIT QUERY_START DISCONNECT ServerMessageEvents \u00b6 ALLOW_CHAT_MESSAGE ALLOW_GAME_MESSAGE ALLOW_COMMAND_MESSAGE CHAT_MESSAGE GAME_MESSAGE COMMAND_MESSAGE ServerPlayConnectionEvents \u00b6 INIT JOIN DISCONNECT ServerPlayerEvents \u00b6 COPY_FROM AFTER_RESPAWN ALLOW_DEATH ServerTickEvents \u00b6 START_SERVER_TICK END_SERVER_TICK START_WORLD_TICK END_WORLD_TICK ServerWorldEvents \u00b6 LOAD UNLOAD WorldRenderEvents \u00b6 START AFTER_SETUP BEFORE_ENTITIES AFTER_ENTITIES BEFORE_BLOCK_OUTLINE BLOCK_OUTLINE BEFORE_DEBUG_RENDER AFTER_TRANSLUCENT LAST END Non-grouped events \u00b6 AttackBlockCallback.EVENT AttackEntityCallback.EVENT ClientCommandRegistrationCallback.EVENT ClientPickBlockApplyCallback.EVENT ClientPickBlockGatherCallback.EVENT ClientPlayerBlockBreakEvents.AFTER ClientPreAttackCallback.EVENT [CombinedProvidersImpl \\(Provider.event](https://github.com/FabricMC/fabric/tree/1.20.4/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/impl/transfer/fluid/CombinedProvidersImpl\\) Provider.java) CommandRegistrationCallback.EVENT CommonLifecycleEvents.TAGS_LOADED CoreShaderRegistrationCallback.EVENT DynamicRegistrySetupCallback.EVENT FluidStorage.GENERAL_COMBINED_PROVIDER HudRenderCallback.EVENT InvalidateRenderStateCallback.EVENT ItemGroupEvents.MODIFY_ENTRIES_ALL ItemTooltipCallback.EVENT LivingEntityFeatureRenderEvents.ALLOW_CAPE_RENDER LivingEntityFeatureRendererRegistrationCallback.EVENT ModifyItemAttributeModifiersCallback.EVENT ParticleRenderEvents.ALLOW_BLOCK_DUST_TINT ServerEntityCombatEvents.AFTER_KILLED_OTHER_ENTITY ServerMessageDecoratorEvent.EVENT TooltipComponentCallback.EVENT UseBlockCallback.EVENT UseEntityCallback.EVENT UseItemCallback.EVENT Deprecated events \u00b6 ClientPickBlockCallback.EVENT ClientTickCallback.EVENT CommandRegistrationCallback.EVENT InvalidateRenderStateCallback.EVENT ItemTooltipCallback.EVENT LivingEntityFeatureRendererRegistrationCallback.EVENT ServerStartCallback.EVENT ServerStopCallback.EVENT ServerTickCallback.EVENT WorldTickCallback.EVENT","title":"Fabric API Events"},{"location":"fabric-events/#fabric-api-events","text":"Fabric API version: 0.96.11+1.20.4 Total event count: 165","title":"Fabric API Events"},{"location":"fabric-events/#grouped-events","text":"","title":"Grouped events"},{"location":"fabric-events/#c2sconfigurationchannelevents","text":"REGISTER UNREGISTER","title":"C2SConfigurationChannelEvents"},{"location":"fabric-events/#c2splaychannelevents","text":"REGISTER UNREGISTER","title":"C2SPlayChannelEvents"},{"location":"fabric-events/#clientblockentityevents","text":"BLOCK_ENTITY_LOAD BLOCK_ENTITY_UNLOAD","title":"ClientBlockEntityEvents"},{"location":"fabric-events/#clientchunkevents","text":"CHUNK_LOAD CHUNK_UNLOAD","title":"ClientChunkEvents"},{"location":"fabric-events/#clientconfigurationconnectionevents","text":"INIT READY DISCONNECT","title":"ClientConfigurationConnectionEvents"},{"location":"fabric-events/#cliententityevents","text":"ENTITY_LOAD ENTITY_UNLOAD","title":"ClientEntityEvents"},{"location":"fabric-events/#clientlifecycleevents","text":"CLIENT_STARTED CLIENT_STOPPING","title":"ClientLifecycleEvents"},{"location":"fabric-events/#clientloginconnectionevents","text":"INIT QUERY_START DISCONNECT","title":"ClientLoginConnectionEvents"},{"location":"fabric-events/#clientplayconnectionevents","text":"INIT JOIN DISCONNECT","title":"ClientPlayConnectionEvents"},{"location":"fabric-events/#clientreceivemessageevents","text":"ALLOW_CHAT ALLOW_GAME MODIFY_GAME CHAT GAME CHAT_CANCELED GAME_CANCELED","title":"ClientReceiveMessageEvents"},{"location":"fabric-events/#clientsendmessageevents","text":"ALLOW_CHAT ALLOW_COMMAND MODIFY_CHAT MODIFY_COMMAND CHAT COMMAND CHAT_CANCELED COMMAND_CANCELED","title":"ClientSendMessageEvents"},{"location":"fabric-events/#clienttickevents","text":"START_CLIENT_TICK END_CLIENT_TICK START_WORLD_TICK END_WORLD_TICK","title":"ClientTickEvents"},{"location":"fabric-events/#entityelytraevents","text":"ALLOW CUSTOM","title":"EntityElytraEvents"},{"location":"fabric-events/#entitysleepevents","text":"ALLOW_SLEEPING START_SLEEPING STOP_SLEEPING ALLOW_BED ALLOW_SLEEP_TIME ALLOW_NEARBY_MONSTERS ALLOW_RESETTING_TIME MODIFY_SLEEPING_DIRECTION ALLOW_SETTING_SPAWN SET_BED_OCCUPATION_STATE MODIFY_WAKE_UP_POSITION","title":"EntitySleepEvents"},{"location":"fabric-events/#entitytrackingevents","text":"START_TRACKING STOP_TRACKING","title":"EntityTrackingEvents"},{"location":"fabric-events/#loottableevents","text":"REPLACE MODIFY ALL_LOADED","title":"LootTableEvents"},{"location":"fabric-events/#modelloaderplugincontextimpl","text":"modelResolvers onLoadModifiers beforeBakeModifiers afterBakeModifiers legacyVariantProviders","title":"ModelLoaderPluginContextImpl"},{"location":"fabric-events/#playerblockbreakevents","text":"BEFORE AFTER CANCELED","title":"PlayerBlockBreakEvents"},{"location":"fabric-events/#s2cconfigurationchannelevents","text":"REGISTER UNREGISTER","title":"S2CConfigurationChannelEvents"},{"location":"fabric-events/#s2cplaychannelevents","text":"REGISTER UNREGISTER","title":"S2CPlayChannelEvents"},{"location":"fabric-events/#screenevents","text":"BEFORE_INIT AFTER_INIT","title":"ScreenEvents"},{"location":"fabric-events/#serverblockentityevents","text":"BLOCK_ENTITY_LOAD BLOCK_ENTITY_UNLOAD","title":"ServerBlockEntityEvents"},{"location":"fabric-events/#serverchunkevents","text":"CHUNK_LOAD CHUNK_UNLOAD","title":"ServerChunkEvents"},{"location":"fabric-events/#serverconfigurationconnectionevents","text":"BEFORE_CONFIGURE CONFIGURE DISCONNECT","title":"ServerConfigurationConnectionEvents"},{"location":"fabric-events/#serverentityevents","text":"ENTITY_LOAD ENTITY_UNLOAD EQUIPMENT_CHANGE","title":"ServerEntityEvents"},{"location":"fabric-events/#serverentityworldchangeevents","text":"AFTER_ENTITY_CHANGE_WORLD AFTER_PLAYER_CHANGE_WORLD","title":"ServerEntityWorldChangeEvents"},{"location":"fabric-events/#serverlifecycleevents","text":"SERVER_STARTING SERVER_STARTED SERVER_STOPPING SERVER_STOPPED SYNC_DATA_PACK_CONTENTS START_DATA_PACK_RELOAD END_DATA_PACK_RELOAD BEFORE_SAVE AFTER_SAVE","title":"ServerLifecycleEvents"},{"location":"fabric-events/#serverlivingentityevents","text":"ALLOW_DAMAGE ALLOW_DEATH AFTER_DEATH MOB_CONVERSION","title":"ServerLivingEntityEvents"},{"location":"fabric-events/#serverloginconnectionevents","text":"INIT QUERY_START DISCONNECT","title":"ServerLoginConnectionEvents"},{"location":"fabric-events/#servermessageevents","text":"ALLOW_CHAT_MESSAGE ALLOW_GAME_MESSAGE ALLOW_COMMAND_MESSAGE CHAT_MESSAGE GAME_MESSAGE COMMAND_MESSAGE","title":"ServerMessageEvents"},{"location":"fabric-events/#serverplayconnectionevents","text":"INIT JOIN DISCONNECT","title":"ServerPlayConnectionEvents"},{"location":"fabric-events/#serverplayerevents","text":"COPY_FROM AFTER_RESPAWN ALLOW_DEATH","title":"ServerPlayerEvents"},{"location":"fabric-events/#servertickevents","text":"START_SERVER_TICK END_SERVER_TICK START_WORLD_TICK END_WORLD_TICK","title":"ServerTickEvents"},{"location":"fabric-events/#serverworldevents","text":"LOAD UNLOAD","title":"ServerWorldEvents"},{"location":"fabric-events/#worldrenderevents","text":"START AFTER_SETUP BEFORE_ENTITIES AFTER_ENTITIES BEFORE_BLOCK_OUTLINE BLOCK_OUTLINE BEFORE_DEBUG_RENDER AFTER_TRANSLUCENT LAST END","title":"WorldRenderEvents"},{"location":"fabric-events/#non-grouped-events","text":"AttackBlockCallback.EVENT AttackEntityCallback.EVENT ClientCommandRegistrationCallback.EVENT ClientPickBlockApplyCallback.EVENT ClientPickBlockGatherCallback.EVENT ClientPlayerBlockBreakEvents.AFTER ClientPreAttackCallback.EVENT [CombinedProvidersImpl \\(Provider.event](https://github.com/FabricMC/fabric/tree/1.20.4/fabric-transfer-api-v1/src/main/java/net/fabricmc/fabric/impl/transfer/fluid/CombinedProvidersImpl\\) Provider.java) CommandRegistrationCallback.EVENT CommonLifecycleEvents.TAGS_LOADED CoreShaderRegistrationCallback.EVENT DynamicRegistrySetupCallback.EVENT FluidStorage.GENERAL_COMBINED_PROVIDER HudRenderCallback.EVENT InvalidateRenderStateCallback.EVENT ItemGroupEvents.MODIFY_ENTRIES_ALL ItemTooltipCallback.EVENT LivingEntityFeatureRenderEvents.ALLOW_CAPE_RENDER LivingEntityFeatureRendererRegistrationCallback.EVENT ModifyItemAttributeModifiersCallback.EVENT ParticleRenderEvents.ALLOW_BLOCK_DUST_TINT ServerEntityCombatEvents.AFTER_KILLED_OTHER_ENTITY ServerMessageDecoratorEvent.EVENT TooltipComponentCallback.EVENT UseBlockCallback.EVENT UseEntityCallback.EVENT UseItemCallback.EVENT","title":"Non-grouped events"},{"location":"fabric-events/#deprecated-events","text":"ClientPickBlockCallback.EVENT ClientTickCallback.EVENT CommandRegistrationCallback.EVENT InvalidateRenderStateCallback.EVENT ItemTooltipCallback.EVENT LivingEntityFeatureRendererRegistrationCallback.EVENT ServerStartCallback.EVENT ServerStopCallback.EVENT ServerTickCallback.EVENT WorldTickCallback.EVENT","title":"Deprecated events"},{"location":"data-attributes/api/","text":"Structure and Overview \u00b6 Data Attributes includes an API package, located at com.github.clevernucleus.dataattributes.api and contains the following: \ud83d\udcc2api \u2523\ud83d\udcc2attribute \u2503 \u2523\ud83d\udcc4AdditionFunction.java interface \u2503 \u2523\ud83d\udcc4AttributeBehaviour.java enum \u2503 \u2523\ud83d\udcc4AdditionFunction.java interface \u2503 \u2523\ud83d\udcc4IAttribute.java interface \u2503 \u2523\ud83d\udcc4IAttributeFunction.java interface \u2503 \u2517\ud83d\udcc4IEntityAttributeModifier.java interface \u2503 \u2523\ud83d\udcc2event \u2503 \u2523\ud83d\udcc2client \u2503 \u2503 \u2517\ud83d\udcc4ClientSyncedEvent.java class \u2503 \u2503 \u2503 \u2523\ud83d\udcc4EntityAttributeEvents.java class \u2503 \u2523\ud83d\udcc4MathClampEvent.java class \u2503 \u2517\ud83d\udcc4ServerSyncedEvent.java class \u2503 \u2517\ud83d\udcc4API.java class API Content \u00b6 The following subsections detail every method/field in each java class located in the api package. attribute.IEntityAttribute.java \u00b6 Modifiers and Type Method/Field and Description double minValue() - Returns the attribute\u2019s minimum value. double maxValue() - Returns the attribute\u2019s maximum value. StackingBehaviour stackingBehaviour() - Returns the attribute\u2019s stacking behaviour enum type. Map<IEntityAttribute, Double> children() - Returns an immutable map of the function-children attached to this attribute. Collection<String> properties() - Returns an immutable collection of the properties\u2019 keys attached to this attribute. boolean hasProperty(String property) - Returns true if this attribute has the input property key, false if not or if the input is null. String getProperty(String property) - Returns the attribute\u2019s property value mapped to the input key. If it does not exist or is null, returns \"\" . attribute.IEntityAttributeInstance.java \u00b6 Modifiers and Type Method/Field and Description void updateModifier(UUID uuid, double value) - Changes the value of the input modifier (if it exists) and updates the instance and all children. attribute.IItemEntityAttributeModifiers.java \u00b6 Modifiers and Type Method/Field and Description default Multimap<EntityAttribute, EntityAttributeModifier> getAttributeModifiers(ItemStack stack, EquipmentSlot slot) - This method provides a mutable attribute modifier multimap so that items can have dynamically changing modifiers based on nbt. By default returns an empty HashMultimap . attribute.StackingBehaviour.java \u00b6 Modifiers and Type Method/Field and Description publicstatic final StackingBehaviour FLAT - Flat/normal stacking behaviour. publicstatic final StackingBehaviour DIMINISHING - diminishing/normal stacking behaviour. public byte id() - Returns the byte id of the behaviour enum. public double max(double current, double input) - Clamps the input and returns the greater of the current or absolute clamped input. public double stack(double current, double input) - Clamps the input and returns the current + the absolute clamped input. public double result(double k, double k2, double v, double v2, double increment) - Returns the inputs through the correct function for the specific behaviour type. public static StackingBehaviour of(byte id) - Takes a byte id and retusn the corresponding behaviour type. attribute.StackingFunction.java \u00b6 Modifiers and Type Method/Field and Description double result(double k, double k2, double v, double v2, double increment) - Returns the inputs through the correct function for the specific behaviour type. event.EntityAttributeModifiedEvents.java \u00b6 Modifiers and Type Method/Field and Description public static final Event<Reloaded> EVENT - Fires when the value of an attribute instance has been modified, either by adding/removing a modifier or changing the value of a modifier. public static final Event<Clamp> CLAMPED - Fires after the attribute instance value is calculated, but before it is output. This offers one last chance to alter the value in some way (for example round a decimal to an integer). public interface Modified {\u2026} - Nested functional interface for MODIFIED . public interface Reloaded {\u2026} - Nested functional interface for EVENT . event.AttributesReloadedEvent.java \u00b6 Modifiers and Type Method/Field and Description public static final Event<Reloaded> EVENT - Event that allows for logic reliant on datapack attributes to be ordered after they are loaded on both the server and client. Fired on Server upon joining world and on datapack reload through /reload . Fired on Client when selecting datapacks and after server has synced with client. public interface Reloaded {\u2026} - Nested functional interface for EVENT . item.ItemFields.java \u00b6 Modifiers and Type Method/Field and Description public static UUID attackDamageModifierID() - Returns Item#ATTACK_DAMAGE_MODIFIER_ID. public static UUID attackSpeedModifierID() - Returns Item#ATTACK_SPEED_MODIFIER_ID. item.ItemHelper.java \u00b6 Modifiers and Type Method/Field and Description default void onStackCreated(ItemStack itemStack, int count) - Fired on the constructor for itemstacks. All items are automatically an instance of ItemHelper , so checks should be made when using this to avoid running unnecessary logic on all itemstack creation events. Example usage includes attaching nbt data when an itemstack is first created. default float getAttackDamage(ItemStack itemStack) - Returns 0.0 by default. ItemStack dependent version of SwordItem#getAttackDamage and MiningToolItem#getAttackDamage; for the SwordItem and MiningToolItem , returns the non-itemstack dependent methods. default float getProtection(ItemStack itemStack) - Returns 0.0 by default. ItemStack dependent version of ArmorItem#getProtection ; for ArmorItem , returns the non-itemstack dependent method. default float getToughness(ItemStack itemStack) - Returns 0.0 by default. ItemStack dependent version of ArmorItem#getToughness; for ArmorItem , returns the non-itemstack dependent method. SoundEvent getEquipSound(ItemStack itemStack) - Returns null by default. ItemStack dependent version of Item#getEquipSound . util.Maths.java \u00b6 Modifiers and Type Method/Field and Description public static Map<K, V> enumLookupMap(V[] values, Function<V, K> mapping) - Creates a static lookup map for the input enum#values implementation. public static float parse(String string) - Parses a string to a float. If it cannot be parsed, returns 0F. public static double stairs(double x, double stretch, double steepness, double xOffset, double yOffset) - A staircase function based on Math#sin . public static boolean isWithinLimits(double value, double min, double max) - Returns true if the value is less than max and greater than or equal to min. util.RandDistribution.java \u00b6 Modifiers and Type Method/Field and Description public RandDistribution(T fallback) - Constructor. public void add(T input, float weight) - Adds to the internal inventory of the distributor. public T getDistributedRandom() - Returns a randomly distributed and weighted result. util.VoidConsumer.java \u00b6 Modifiers and Type Method/Field and Description void accept() - A functional interface equivalent to a Consumer, but with no parameters. DataAttributesAPI.java \u00b6 Modifiers and Type Method/Field and Description public static final String MODID - The mod id. public static Supplier<EntityAttribute> getAttribute(Identifier registryKey) - Returns a Supplier getting the registered attribute assigned to the input key. Uses a supplier because attributes added through json are null until datapacks are loaded/synced to the client, so static initialisation would not work. public static T ifPresent(LivingEntity entity, Supplier<EntityAttribute> attribute, T fallback, Function<Float, T> function) - Allows for Optional-like use of attributes that may or may not exist all the time. This is the correct way of getting and using values from attributes loaded by datapacks. If the entity is not null and the input attribute exists, and the entity has the input attribute, passes and returns the input function. Otherwise, returns the fallback input.","title":"API"},{"location":"data-attributes/api/#structure-and-overview","text":"Data Attributes includes an API package, located at com.github.clevernucleus.dataattributes.api and contains the following: \ud83d\udcc2api \u2523\ud83d\udcc2attribute \u2503 \u2523\ud83d\udcc4AdditionFunction.java interface \u2503 \u2523\ud83d\udcc4AttributeBehaviour.java enum \u2503 \u2523\ud83d\udcc4AdditionFunction.java interface \u2503 \u2523\ud83d\udcc4IAttribute.java interface \u2503 \u2523\ud83d\udcc4IAttributeFunction.java interface \u2503 \u2517\ud83d\udcc4IEntityAttributeModifier.java interface \u2503 \u2523\ud83d\udcc2event \u2503 \u2523\ud83d\udcc2client \u2503 \u2503 \u2517\ud83d\udcc4ClientSyncedEvent.java class \u2503 \u2503 \u2503 \u2523\ud83d\udcc4EntityAttributeEvents.java class \u2503 \u2523\ud83d\udcc4MathClampEvent.java class \u2503 \u2517\ud83d\udcc4ServerSyncedEvent.java class \u2503 \u2517\ud83d\udcc4API.java class","title":"Structure and Overview"},{"location":"data-attributes/api/#api-content","text":"The following subsections detail every method/field in each java class located in the api package.","title":"API Content"},{"location":"data-attributes/api/#attributeientityattributejava","text":"Modifiers and Type Method/Field and Description double minValue() - Returns the attribute\u2019s minimum value. double maxValue() - Returns the attribute\u2019s maximum value. StackingBehaviour stackingBehaviour() - Returns the attribute\u2019s stacking behaviour enum type. Map<IEntityAttribute, Double> children() - Returns an immutable map of the function-children attached to this attribute. Collection<String> properties() - Returns an immutable collection of the properties\u2019 keys attached to this attribute. boolean hasProperty(String property) - Returns true if this attribute has the input property key, false if not or if the input is null. String getProperty(String property) - Returns the attribute\u2019s property value mapped to the input key. If it does not exist or is null, returns \"\" .","title":"attribute.IEntityAttribute.java"},{"location":"data-attributes/api/#attributeientityattributeinstancejava","text":"Modifiers and Type Method/Field and Description void updateModifier(UUID uuid, double value) - Changes the value of the input modifier (if it exists) and updates the instance and all children.","title":"attribute.IEntityAttributeInstance.java"},{"location":"data-attributes/api/#attributeiitementityattributemodifiersjava","text":"Modifiers and Type Method/Field and Description default Multimap<EntityAttribute, EntityAttributeModifier> getAttributeModifiers(ItemStack stack, EquipmentSlot slot) - This method provides a mutable attribute modifier multimap so that items can have dynamically changing modifiers based on nbt. By default returns an empty HashMultimap .","title":"attribute.IItemEntityAttributeModifiers.java"},{"location":"data-attributes/api/#attributestackingbehaviourjava","text":"Modifiers and Type Method/Field and Description publicstatic final StackingBehaviour FLAT - Flat/normal stacking behaviour. publicstatic final StackingBehaviour DIMINISHING - diminishing/normal stacking behaviour. public byte id() - Returns the byte id of the behaviour enum. public double max(double current, double input) - Clamps the input and returns the greater of the current or absolute clamped input. public double stack(double current, double input) - Clamps the input and returns the current + the absolute clamped input. public double result(double k, double k2, double v, double v2, double increment) - Returns the inputs through the correct function for the specific behaviour type. public static StackingBehaviour of(byte id) - Takes a byte id and retusn the corresponding behaviour type.","title":"attribute.StackingBehaviour.java"},{"location":"data-attributes/api/#attributestackingfunctionjava","text":"Modifiers and Type Method/Field and Description double result(double k, double k2, double v, double v2, double increment) - Returns the inputs through the correct function for the specific behaviour type.","title":"attribute.StackingFunction.java"},{"location":"data-attributes/api/#evententityattributemodifiedeventsjava","text":"Modifiers and Type Method/Field and Description public static final Event<Reloaded> EVENT - Fires when the value of an attribute instance has been modified, either by adding/removing a modifier or changing the value of a modifier. public static final Event<Clamp> CLAMPED - Fires after the attribute instance value is calculated, but before it is output. This offers one last chance to alter the value in some way (for example round a decimal to an integer). public interface Modified {\u2026} - Nested functional interface for MODIFIED . public interface Reloaded {\u2026} - Nested functional interface for EVENT .","title":"event.EntityAttributeModifiedEvents.java"},{"location":"data-attributes/api/#eventattributesreloadedeventjava","text":"Modifiers and Type Method/Field and Description public static final Event<Reloaded> EVENT - Event that allows for logic reliant on datapack attributes to be ordered after they are loaded on both the server and client. Fired on Server upon joining world and on datapack reload through /reload . Fired on Client when selecting datapacks and after server has synced with client. public interface Reloaded {\u2026} - Nested functional interface for EVENT .","title":"event.AttributesReloadedEvent.java"},{"location":"data-attributes/api/#itemitemfieldsjava","text":"Modifiers and Type Method/Field and Description public static UUID attackDamageModifierID() - Returns Item#ATTACK_DAMAGE_MODIFIER_ID. public static UUID attackSpeedModifierID() - Returns Item#ATTACK_SPEED_MODIFIER_ID.","title":"item.ItemFields.java"},{"location":"data-attributes/api/#itemitemhelperjava","text":"Modifiers and Type Method/Field and Description default void onStackCreated(ItemStack itemStack, int count) - Fired on the constructor for itemstacks. All items are automatically an instance of ItemHelper , so checks should be made when using this to avoid running unnecessary logic on all itemstack creation events. Example usage includes attaching nbt data when an itemstack is first created. default float getAttackDamage(ItemStack itemStack) - Returns 0.0 by default. ItemStack dependent version of SwordItem#getAttackDamage and MiningToolItem#getAttackDamage; for the SwordItem and MiningToolItem , returns the non-itemstack dependent methods. default float getProtection(ItemStack itemStack) - Returns 0.0 by default. ItemStack dependent version of ArmorItem#getProtection ; for ArmorItem , returns the non-itemstack dependent method. default float getToughness(ItemStack itemStack) - Returns 0.0 by default. ItemStack dependent version of ArmorItem#getToughness; for ArmorItem , returns the non-itemstack dependent method. SoundEvent getEquipSound(ItemStack itemStack) - Returns null by default. ItemStack dependent version of Item#getEquipSound .","title":"item.ItemHelper.java"},{"location":"data-attributes/api/#utilmathsjava","text":"Modifiers and Type Method/Field and Description public static Map<K, V> enumLookupMap(V[] values, Function<V, K> mapping) - Creates a static lookup map for the input enum#values implementation. public static float parse(String string) - Parses a string to a float. If it cannot be parsed, returns 0F. public static double stairs(double x, double stretch, double steepness, double xOffset, double yOffset) - A staircase function based on Math#sin . public static boolean isWithinLimits(double value, double min, double max) - Returns true if the value is less than max and greater than or equal to min.","title":"util.Maths.java"},{"location":"data-attributes/api/#utilranddistributionjava","text":"Modifiers and Type Method/Field and Description public RandDistribution(T fallback) - Constructor. public void add(T input, float weight) - Adds to the internal inventory of the distributor. public T getDistributedRandom() - Returns a randomly distributed and weighted result.","title":"util.RandDistribution.java"},{"location":"data-attributes/api/#utilvoidconsumerjava","text":"Modifiers and Type Method/Field and Description void accept() - A functional interface equivalent to a Consumer, but with no parameters.","title":"util.VoidConsumer.java"},{"location":"data-attributes/api/#dataattributesapijava","text":"Modifiers and Type Method/Field and Description public static final String MODID - The mod id. public static Supplier<EntityAttribute> getAttribute(Identifier registryKey) - Returns a Supplier getting the registered attribute assigned to the input key. Uses a supplier because attributes added through json are null until datapacks are loaded/synced to the client, so static initialisation would not work. public static T ifPresent(LivingEntity entity, Supplier<EntityAttribute> attribute, T fallback, Function<Float, T> function) - Allows for Optional-like use of attributes that may or may not exist all the time. This is the correct way of getting and using values from attributes loaded by datapacks. If the entity is not null and the input attribute exists, and the entity has the input attribute, passes and returns the input function. Otherwise, returns the fallback input.","title":"DataAttributesAPI.java"},{"location":"data-attributes/attribute-functions/","text":"Data Attributes introduces two entirely new ideas to Minecraft's entity attributes: functions and properties . This section covers attribute functions by presenting a series of examples. Overview \u00b6 Attribute Functions allow you to relate attributes to each other in a way that is common in other games: Dota 2 has the primary attributes Strength, Agility and Intelligence - where Strength increases the health pool , Agility increases armor and Intelligence increases Mana . PoE is much the same, where Strength increases maximum life , Dexterity grants Evasion and Intelligence also increases Mana . The implementation of Attribute Functions is out of the scope of this wiki, but basically each attribute now has a collection of children and parent attributes. When defining an Attribute Function , you define an entity attribute (the parent) and assign to it a list of other attributes (children) . The resulting behaviour in-game is that whenever the value of a parent attribute changes , the value of all its children changes as well. This is one-directional, a change in the value of a child does not impact the value of its parents. The Need for Attribute Functions \u00b6 The premise for this questions resides in a commonly found aspect of RPGs . Often, their attribute systems are structured with a few primary attributes (think Constitution, Strength, Dexterity for example) and then secondary attributes (think Max Health, Damage, Evasion for example) . Increasing the value of a primary attribute increases the value of secondary attributes as well. The Problem \u00b6 Lets say we have a Minecraft mod that provides this RPG-type attribute system , and there is a nice screen with buttons that let you skill/increase those primary attributes. In code, we may have a method similar to Button#addAttribute ; we would pass the attribute to increase and the amount to increase it by as arguments: void onButtonClick ( Button button ) { button . addAttribute ( Attributes . CONSTITUTION , 1.0 ); } This is actually fine so far; there is nothing wrong with doing it this way. However, things get cumbersome when we implement follow-on attributes . Say for every one point in Constitution , we increase our Max Health by one , Knockback Resistance by 0.01 and Damage by 0.5 : void onButtonClick ( Button button ) { button . addAttribute ( Attributes . CONSTITUTION , 1.0 ); button . addAttribute ( Attributes . MAX_HEALTH , 1.0 ); button . addAttribute ( Attributes . KNOCKBACK_RESISTANCE , 0.01 ); button . addAttribute ( Attributes . DAMAGE , 0.5 ); } This is not great. Furthermore, what happens when someone uses the /attribute command to increase their Constitution? Or equips an item that increases their Constitution? Or what happens when a player wants to customise what attributes are changed when Constitution is changed? What about configurability? We have to create unwieldy repetitons everywhere any kind of attribute modifying code occurs. It is not feasible to do this. The Solution \u00b6 The solution is described briefly in the Overview : we denominate our attributes as either the parent or child ; to the parent, we attach a collection of references to it's children ; and to the child, we attach a collection of references to it's parents . Denominations of child and parent are not mutually exclusive . A parent attribute can be a child to another attribute, just as a child attribute can be a parent to another attribute. Example 1 \u00b6 Say the player has the attribute Constitution ; and for every point added in this attribute, a point is also added to Max Health . This would be done using an attribute function . Functions allow for attributes to influence each other. We have our examplemod , and we\u2019ve added the attribute Constitution , but now we want to make it so that for every point added to Constitution , a point is added to Max Health and half a point is added to Armor . We go to the directory data/examplemod/attributes/ where we create the JSON file functions.json. Inside this file, we add the following: { \"values\" : { \"examplemod:constitution\" : { \"minecraft:generic.max_health\" : { \"behaviour\" : \"ADDITION\" , \"value\" : 1.0 }, \"minecraft:generic.armor\" : { \"behaviour\" : \"ADDITION\" , \"value\" : 0.5 } } } } They are now differentiated by Function Behaviour as either ADDITION or MULTIPLY functions. This is due to the need to be able to have attributes that contribute multiplicatively instead of flat addition . Instead of a number value assigned to the attribute, an object value is assigned that contains the behaviour and value fields. Example 2 \u00b6 { \"values\" : { \"examplemod:dexterity\" : { \"minecraft:generic.attack_speed\" : { \"behaviour\" : \"MULTIPLY\" , \"value\" : 0.02 }, \"examplemod:dash_speed\" : { \"behaviour\" : \"ADDITION\" , \"value\" : 0.1 } } } } Every point in examplemod:dexterity now increases Attack Speed by 2% - or more specifically, multiplies the total value of Attack Speed by 1.02 = 1.0 + 0.02 . Recursion \u00b6 The keen eye among you may have notices that there is an opportunity for recursion/infinite attributes . Lets show how this might be done: { \"values\" : { \"examplemod:constitution\" : { \"minecraft:generic.max_health\" : 1.0 }, \"minecraft:generic.max_health\" : { \"examplemod:constitution\" : 1.0 } } } Looking at our functions.json file, we can see that when we add a point to Constitution , a point is added to Max Health ; but when a point is added to Max Health , a point is added to Constitution - it would seem we have a vicious cycle on our hands. One could even see how a huge chain of attributes could accidentally become recursive . Constitution adds to Max Health adds to Strength adds to Armor adds to Knockback Resistance adds to Constitution\u2026 Not to mention that since each attribute can have many functions attached, the tree of possible combinations resulting in recursion can be extensive . Therefore, Data Attributes implements protections against this. When the functions.json files are read and assembled , the functions tree is scanned for loops . Any loops found are broken by removing the first function found that results in a loop. The specific function that would be removed for a specific set of circumstances is unreliable, just that it is impossible for loops to form. This is done so that checks do not have to be made in game, which could cause lag. That being said, developers and pack creators alike should still be careful not to create loops .","title":"Attribute Functions"},{"location":"data-attributes/attribute-functions/#overview","text":"Attribute Functions allow you to relate attributes to each other in a way that is common in other games: Dota 2 has the primary attributes Strength, Agility and Intelligence - where Strength increases the health pool , Agility increases armor and Intelligence increases Mana . PoE is much the same, where Strength increases maximum life , Dexterity grants Evasion and Intelligence also increases Mana . The implementation of Attribute Functions is out of the scope of this wiki, but basically each attribute now has a collection of children and parent attributes. When defining an Attribute Function , you define an entity attribute (the parent) and assign to it a list of other attributes (children) . The resulting behaviour in-game is that whenever the value of a parent attribute changes , the value of all its children changes as well. This is one-directional, a change in the value of a child does not impact the value of its parents.","title":"Overview"},{"location":"data-attributes/attribute-functions/#the-need-for-attribute-functions","text":"The premise for this questions resides in a commonly found aspect of RPGs . Often, their attribute systems are structured with a few primary attributes (think Constitution, Strength, Dexterity for example) and then secondary attributes (think Max Health, Damage, Evasion for example) . Increasing the value of a primary attribute increases the value of secondary attributes as well.","title":"The Need for Attribute Functions"},{"location":"data-attributes/attribute-functions/#the-problem","text":"Lets say we have a Minecraft mod that provides this RPG-type attribute system , and there is a nice screen with buttons that let you skill/increase those primary attributes. In code, we may have a method similar to Button#addAttribute ; we would pass the attribute to increase and the amount to increase it by as arguments: void onButtonClick ( Button button ) { button . addAttribute ( Attributes . CONSTITUTION , 1.0 ); } This is actually fine so far; there is nothing wrong with doing it this way. However, things get cumbersome when we implement follow-on attributes . Say for every one point in Constitution , we increase our Max Health by one , Knockback Resistance by 0.01 and Damage by 0.5 : void onButtonClick ( Button button ) { button . addAttribute ( Attributes . CONSTITUTION , 1.0 ); button . addAttribute ( Attributes . MAX_HEALTH , 1.0 ); button . addAttribute ( Attributes . KNOCKBACK_RESISTANCE , 0.01 ); button . addAttribute ( Attributes . DAMAGE , 0.5 ); } This is not great. Furthermore, what happens when someone uses the /attribute command to increase their Constitution? Or equips an item that increases their Constitution? Or what happens when a player wants to customise what attributes are changed when Constitution is changed? What about configurability? We have to create unwieldy repetitons everywhere any kind of attribute modifying code occurs. It is not feasible to do this.","title":"The Problem"},{"location":"data-attributes/attribute-functions/#the-solution","text":"The solution is described briefly in the Overview : we denominate our attributes as either the parent or child ; to the parent, we attach a collection of references to it's children ; and to the child, we attach a collection of references to it's parents . Denominations of child and parent are not mutually exclusive . A parent attribute can be a child to another attribute, just as a child attribute can be a parent to another attribute.","title":"The Solution"},{"location":"data-attributes/attribute-functions/#example-1","text":"Say the player has the attribute Constitution ; and for every point added in this attribute, a point is also added to Max Health . This would be done using an attribute function . Functions allow for attributes to influence each other. We have our examplemod , and we\u2019ve added the attribute Constitution , but now we want to make it so that for every point added to Constitution , a point is added to Max Health and half a point is added to Armor . We go to the directory data/examplemod/attributes/ where we create the JSON file functions.json. Inside this file, we add the following: { \"values\" : { \"examplemod:constitution\" : { \"minecraft:generic.max_health\" : { \"behaviour\" : \"ADDITION\" , \"value\" : 1.0 }, \"minecraft:generic.armor\" : { \"behaviour\" : \"ADDITION\" , \"value\" : 0.5 } } } } They are now differentiated by Function Behaviour as either ADDITION or MULTIPLY functions. This is due to the need to be able to have attributes that contribute multiplicatively instead of flat addition . Instead of a number value assigned to the attribute, an object value is assigned that contains the behaviour and value fields.","title":"Example 1"},{"location":"data-attributes/attribute-functions/#example-2","text":"{ \"values\" : { \"examplemod:dexterity\" : { \"minecraft:generic.attack_speed\" : { \"behaviour\" : \"MULTIPLY\" , \"value\" : 0.02 }, \"examplemod:dash_speed\" : { \"behaviour\" : \"ADDITION\" , \"value\" : 0.1 } } } } Every point in examplemod:dexterity now increases Attack Speed by 2% - or more specifically, multiplies the total value of Attack Speed by 1.02 = 1.0 + 0.02 .","title":"Example 2"},{"location":"data-attributes/attribute-functions/#recursion","text":"The keen eye among you may have notices that there is an opportunity for recursion/infinite attributes . Lets show how this might be done: { \"values\" : { \"examplemod:constitution\" : { \"minecraft:generic.max_health\" : 1.0 }, \"minecraft:generic.max_health\" : { \"examplemod:constitution\" : 1.0 } } } Looking at our functions.json file, we can see that when we add a point to Constitution , a point is added to Max Health ; but when a point is added to Max Health , a point is added to Constitution - it would seem we have a vicious cycle on our hands. One could even see how a huge chain of attributes could accidentally become recursive . Constitution adds to Max Health adds to Strength adds to Armor adds to Knockback Resistance adds to Constitution\u2026 Not to mention that since each attribute can have many functions attached, the tree of possible combinations resulting in recursion can be extensive . Therefore, Data Attributes implements protections against this. When the functions.json files are read and assembled , the functions tree is scanned for loops . Any loops found are broken by removing the first function found that results in a loop. The specific function that would be removed for a specific set of circumstances is unreliable, just that it is impossible for loops to form. This is done so that checks do not have to be made in game, which could cause lag. That being said, developers and pack creators alike should still be careful not to create loops .","title":"Recursion"},{"location":"data-attributes/attribute-properties/","text":"Data Attributes introduces two entirely new ideas to Minecraft's entity attributes: functions and properties . This section covers attribute properties by presenting a series of examples. Overview \u00b6 Apart from Attribute Functions , the second thing added to entity attributes are Attribute Properties . These are, in this context, simply extra bits of information appended to entity attributes . They are structured as a map; where both key and value are Strings. Use Cases \u00b6 This feature offers little use for pack creators , aside from editing mods attribute\u2019s properties. For mod developers however, this has the potential for more use. Perhaps you are creating a Trinkets addon, and you want to have your trinkets provide attribute bonuses like +30% Damage or +4 Max Health . You need a rarity system for attributes, and rather than creating one from scratch, you can use Attribute Properties as the framework for this application. Finally, this serves as a configuration feature : by using datapacks, any mod built with Data Attributes can be configured without the need for funky configuration magic - and this configuration can be solely server side as this is powered by datapacks. Example 1 \u00b6 Say we have our examplemod , and we want to assign a rarity value to each attribute that would range from 0.0 to 1.0 . We go to the directory data/examplemod/attributes/ and create the JSON file properties.json : { \"values\" : { \"minecraft:generic.max_health\" : { \"rarity\" : \"0.5\" }, \"minecraft:generic.armor\" : { \"rarity\" : \"0.6\" }, ... } } Where ... would be the rest of the attributes. Here we are adding the rarity property to Max Health and Armor and assigning each property a relevant value. Note how the value is a string: this is so that floating point numbers can be parsed without a loss in precision, but also so that other data can be appended to attributes - not just numbers. Example 2 \u00b6 In this example we just want to assign a special boolean to a custom attribute examplemod:magic . If an attribute has the special property we can say it is true , if the attribute does not have the special property we can say it is false . Since it is just a case of having the property or not, the value doesn\u2019t matter and can just be an empty string: { \"values\" : { \"examplemod:magic\" : { \"special\" : \"\" } } } Attribute Properties are immutable. They can only be accessed and checked for.","title":"Attribute Properties"},{"location":"data-attributes/attribute-properties/#overview","text":"Apart from Attribute Functions , the second thing added to entity attributes are Attribute Properties . These are, in this context, simply extra bits of information appended to entity attributes . They are structured as a map; where both key and value are Strings.","title":"Overview"},{"location":"data-attributes/attribute-properties/#use-cases","text":"This feature offers little use for pack creators , aside from editing mods attribute\u2019s properties. For mod developers however, this has the potential for more use. Perhaps you are creating a Trinkets addon, and you want to have your trinkets provide attribute bonuses like +30% Damage or +4 Max Health . You need a rarity system for attributes, and rather than creating one from scratch, you can use Attribute Properties as the framework for this application. Finally, this serves as a configuration feature : by using datapacks, any mod built with Data Attributes can be configured without the need for funky configuration magic - and this configuration can be solely server side as this is powered by datapacks.","title":"Use Cases"},{"location":"data-attributes/attribute-properties/#example-1","text":"Say we have our examplemod , and we want to assign a rarity value to each attribute that would range from 0.0 to 1.0 . We go to the directory data/examplemod/attributes/ and create the JSON file properties.json : { \"values\" : { \"minecraft:generic.max_health\" : { \"rarity\" : \"0.5\" }, \"minecraft:generic.armor\" : { \"rarity\" : \"0.6\" }, ... } } Where ... would be the rest of the attributes. Here we are adding the rarity property to Max Health and Armor and assigning each property a relevant value. Note how the value is a string: this is so that floating point numbers can be parsed without a loss in precision, but also so that other data can be appended to attributes - not just numbers.","title":"Example 1"},{"location":"data-attributes/attribute-properties/#example-2","text":"In this example we just want to assign a special boolean to a custom attribute examplemod:magic . If an attribute has the special property we can say it is true , if the attribute does not have the special property we can say it is false . Since it is just a case of having the property or not, the value doesn\u2019t matter and can just be an empty string: { \"values\" : { \"examplemod:magic\" : { \"special\" : \"\" } } } Attribute Properties are immutable. They can only be accessed and checked for.","title":"Example 2"},{"location":"data-attributes/datapack-setup/","text":"This section provides an overview of the datapack and config structure used by Data Attributes. Datapack Structure \u00b6 Data Attributes can use Minecraft\u2019s data resource system. The file hierarchy for this is data/namespace/data_attributes . Where namespace is either the default minecraft or any given mod-id. By default, nothing exists in this directory, as all json data is optional. However, a fully populated directory contains the following folders: overrides (for Attribute Overrides) functions (for changing the behavior and operations of an attribute based on a parent with modifiers) entity_types (for attaching attributes and/or modifying their current base attribute values) Datapack Files \u00b6 \ud83d\udcc2data \u2517\ud83d\udcc2<namespace> \u2517\ud83d\udcc2data_attributes \u2523\ud83d\udcc2overrides \u2503 \u2523\ud83d\udcc4any_name.json \u2503 \u2517... \u2523\ud83d\udcc2functions \u2503 \u2523\ud83d\udcc4any_name.json \u2503 \u2517... \u2523\ud83d\udcc2entity_types \u2503 \u2523\ud83d\udcc4any_name.json \u2503 \u2517... \u2523\u2699\ufe0fpack.mcmeta \u2517... Format (Datapacks & Configs) \u00b6 Attribute Overrides \u00b6 { \"entries\" : { \"namespace:path\" : { \"enabled\" : true , \"min\" : 0.0 , \"max\" : 1024.0 , \"smoothness\" : 0.0 , \"min_fallback\" : 0.0 , \"max_fallback\" : 20.0 , \"formula\" : \"Flat/Diminished\" , \"format\" : \"Whole/Percentage\" }, } } Attribute Functions \u00b6 { \"entries\" : { \"parent_namespace:parent_path\" : { \"child_namespace:child_path\" : { \"enabled\" : true , \"behavior\" : \"Add/Multiply\" , \"value\" : 0.0 } } } } Entity Types \u00b6 { \"entries\" : { \"entity_namespace:entity_path\" : { \"attribute_namespace:attribute_path\" : { \"value\" : 0.0 , \"fallback\" : 0.0 } } } } Config Structure \u00b6 Data Attributes also has configuration files. These are found in your game instance folder in config/data_attributes . These are your primary changes , they will always overwrite any changes that come from data-packs. Users can apply changes they wish to see in-game quickly using either the interface, or the json5 files, and then reloading their changes. Config Files \u00b6 \ud83d\udcc2config \u2517\ud83d\udcc2data_attributes \u2503 \u2523\ud83d\udcc4overrides.json5 \u2503 \u2523\ud83d\udcc4functions.json5 \u2503 \u2517\ud83d\udcc4entity_types.json5 Using the Config Interface \u00b6 General Overview \u00b6 The interface was created to allow users to easily edit and apply what Data Attributes offers, such as overrides, attribute attachments to entities, and applying modifiers with different operations through 'functions'. This allows for greater flexibility and a different, more intuitive option then using just json files, and comes feature-rich with autocompletion, reset and deletion abilities, and validation with helpful tooltips. A general look at the Data Attributes interface. Features \u00b6 Autocompletion \u00b6 The interface comes with autocompletion of attribute and entity-type ids, allowing you to target currently registered ones. Autocompletion while editing an id on a ui entry. Adding \u00b6 The interface comes with the ability to add your own entries, using the (+ Add) button. This creates a entry in the interface, that will state minecraft:unknown . You are meant to edit and fill in with a proper attribute id. Editing \u00b6 You are able to edit the ids of entries, allowing for you to select a different target. In some cases, it fills in extra context that you need to know about a specific entry (such as fallbacks for an override). Removing \u00b6 Removal of config entries are also possible in the interface. Pressing the button removes a specific entry, and removing a top-level entry removes everything else under it. This is excluding default entries, as those are not meant to be removed. They are supplied through another source (via. data-packs or mods). Searching \u00b6 You are able to search for specific attribute ids through their respective translation , or the raw id itself. For english, Pig would reference the entry minecraft:pig if it is an id that is present in the UI somewhere. Saving and Reloading Changes \u00b6 Reloading a change using the Reload button will not save your changes in the UI. This is meant to refresh your config with any recently applied json5 changes. In order to save your changes in the UI, you are to press Done . This will apply your changes to the json5 , and then you can either join a world, extract the information, or use /reload if already in a world to see the changes. The footer of the config UI, which contains the search widget. Attribute Overrides \u00b6 For overrides, you are able to see the current minimum and maximum value, along with fallback (or originally set) values of the attribute that were statically initialized. This helps to give you an understanding of the intended ranges that this attribute was meant to fall under. You are also able to see if an override is enabled or disabled, and can change this at will. There is also the Stacking Formula , which you can change to either Flat or Diminished . This is further explained in its own section. You can also change how an attribute is formatted on the API by changing the Format option, which has two options, Whole (the literal value) or Percentage (between the minimum and maximum range) . The Percentage option also supports negative values. If you were to target an attribute ranged from -100 (min) to 150 (max), and you wanted to display the value of an entity that was negative using the DataAttributesAPI#getFormattedValue , it will range from 0 to the negative minimum. In this example, if the entity's value was -30 , it would show as -30% . You are able to also reset overrides to their original settings, and it will apply its default settings and fallbacks. Attribute Functions \u00b6 For functions, you are able to change the literal value of a given child function, or add new function children . You are also able to add new parents , and enable and disable functions. You can change the Behavior of how a function-child operates when its parent attribute increases on an entity. The options currently are Add and Multiply . They are similar to Minecraft's EntityAttributeModifier operations. Add would represent ADDITION Multiply would represent MULTIPLY_TOTAL Example of how Attribute Functions look like on the interface. Entity Types \u00b6 For entity-types, you are able to target specific entities and modify their base-value . If you wanted to give a zombie 60 base health, you can do this! There is also a fallback value that is with the entity-type attribute entry, which shows the original base value loaded for that entity. If the value did not exist on an entity before, it will show as 0.0 . Example of how Entity Types look like on the interface.","title":"Datapack & Config Setup"},{"location":"data-attributes/datapack-setup/#datapack-structure","text":"Data Attributes can use Minecraft\u2019s data resource system. The file hierarchy for this is data/namespace/data_attributes . Where namespace is either the default minecraft or any given mod-id. By default, nothing exists in this directory, as all json data is optional. However, a fully populated directory contains the following folders: overrides (for Attribute Overrides) functions (for changing the behavior and operations of an attribute based on a parent with modifiers) entity_types (for attaching attributes and/or modifying their current base attribute values)","title":"Datapack Structure"},{"location":"data-attributes/datapack-setup/#datapack-files","text":"\ud83d\udcc2data \u2517\ud83d\udcc2<namespace> \u2517\ud83d\udcc2data_attributes \u2523\ud83d\udcc2overrides \u2503 \u2523\ud83d\udcc4any_name.json \u2503 \u2517... \u2523\ud83d\udcc2functions \u2503 \u2523\ud83d\udcc4any_name.json \u2503 \u2517... \u2523\ud83d\udcc2entity_types \u2503 \u2523\ud83d\udcc4any_name.json \u2503 \u2517... \u2523\u2699\ufe0fpack.mcmeta \u2517...","title":"Datapack Files"},{"location":"data-attributes/datapack-setup/#format-datapacks-configs","text":"","title":"Format (Datapacks &amp; Configs)"},{"location":"data-attributes/datapack-setup/#attribute-overrides","text":"{ \"entries\" : { \"namespace:path\" : { \"enabled\" : true , \"min\" : 0.0 , \"max\" : 1024.0 , \"smoothness\" : 0.0 , \"min_fallback\" : 0.0 , \"max_fallback\" : 20.0 , \"formula\" : \"Flat/Diminished\" , \"format\" : \"Whole/Percentage\" }, } }","title":"Attribute Overrides"},{"location":"data-attributes/datapack-setup/#attribute-functions","text":"{ \"entries\" : { \"parent_namespace:parent_path\" : { \"child_namespace:child_path\" : { \"enabled\" : true , \"behavior\" : \"Add/Multiply\" , \"value\" : 0.0 } } } }","title":"Attribute Functions"},{"location":"data-attributes/datapack-setup/#entity-types","text":"{ \"entries\" : { \"entity_namespace:entity_path\" : { \"attribute_namespace:attribute_path\" : { \"value\" : 0.0 , \"fallback\" : 0.0 } } } }","title":"Entity Types"},{"location":"data-attributes/datapack-setup/#config-structure","text":"Data Attributes also has configuration files. These are found in your game instance folder in config/data_attributes . These are your primary changes , they will always overwrite any changes that come from data-packs. Users can apply changes they wish to see in-game quickly using either the interface, or the json5 files, and then reloading their changes.","title":"Config Structure"},{"location":"data-attributes/datapack-setup/#config-files","text":"\ud83d\udcc2config \u2517\ud83d\udcc2data_attributes \u2503 \u2523\ud83d\udcc4overrides.json5 \u2503 \u2523\ud83d\udcc4functions.json5 \u2503 \u2517\ud83d\udcc4entity_types.json5","title":"Config Files"},{"location":"data-attributes/datapack-setup/#using-the-config-interface","text":"","title":"Using the Config Interface"},{"location":"data-attributes/datapack-setup/#general-overview","text":"The interface was created to allow users to easily edit and apply what Data Attributes offers, such as overrides, attribute attachments to entities, and applying modifiers with different operations through 'functions'. This allows for greater flexibility and a different, more intuitive option then using just json files, and comes feature-rich with autocompletion, reset and deletion abilities, and validation with helpful tooltips. A general look at the Data Attributes interface.","title":"General Overview"},{"location":"data-attributes/datapack-setup/#features","text":"","title":"Features"},{"location":"data-attributes/datapack-setup/#autocompletion","text":"The interface comes with autocompletion of attribute and entity-type ids, allowing you to target currently registered ones. Autocompletion while editing an id on a ui entry.","title":"Autocompletion"},{"location":"data-attributes/datapack-setup/#adding","text":"The interface comes with the ability to add your own entries, using the (+ Add) button. This creates a entry in the interface, that will state minecraft:unknown . You are meant to edit and fill in with a proper attribute id.","title":"Adding"},{"location":"data-attributes/datapack-setup/#editing","text":"You are able to edit the ids of entries, allowing for you to select a different target. In some cases, it fills in extra context that you need to know about a specific entry (such as fallbacks for an override).","title":"Editing"},{"location":"data-attributes/datapack-setup/#removing","text":"Removal of config entries are also possible in the interface. Pressing the button removes a specific entry, and removing a top-level entry removes everything else under it. This is excluding default entries, as those are not meant to be removed. They are supplied through another source (via. data-packs or mods).","title":"Removing"},{"location":"data-attributes/datapack-setup/#searching","text":"You are able to search for specific attribute ids through their respective translation , or the raw id itself. For english, Pig would reference the entry minecraft:pig if it is an id that is present in the UI somewhere.","title":"Searching"},{"location":"data-attributes/datapack-setup/#saving-and-reloading-changes","text":"Reloading a change using the Reload button will not save your changes in the UI. This is meant to refresh your config with any recently applied json5 changes. In order to save your changes in the UI, you are to press Done . This will apply your changes to the json5 , and then you can either join a world, extract the information, or use /reload if already in a world to see the changes. The footer of the config UI, which contains the search widget.","title":"Saving and Reloading Changes"},{"location":"data-attributes/datapack-setup/#attribute-overrides_1","text":"For overrides, you are able to see the current minimum and maximum value, along with fallback (or originally set) values of the attribute that were statically initialized. This helps to give you an understanding of the intended ranges that this attribute was meant to fall under. You are also able to see if an override is enabled or disabled, and can change this at will. There is also the Stacking Formula , which you can change to either Flat or Diminished . This is further explained in its own section. You can also change how an attribute is formatted on the API by changing the Format option, which has two options, Whole (the literal value) or Percentage (between the minimum and maximum range) . The Percentage option also supports negative values. If you were to target an attribute ranged from -100 (min) to 150 (max), and you wanted to display the value of an entity that was negative using the DataAttributesAPI#getFormattedValue , it will range from 0 to the negative minimum. In this example, if the entity's value was -30 , it would show as -30% . You are able to also reset overrides to their original settings, and it will apply its default settings and fallbacks.","title":"Attribute Overrides"},{"location":"data-attributes/datapack-setup/#attribute-functions_1","text":"For functions, you are able to change the literal value of a given child function, or add new function children . You are also able to add new parents , and enable and disable functions. You can change the Behavior of how a function-child operates when its parent attribute increases on an entity. The options currently are Add and Multiply . They are similar to Minecraft's EntityAttributeModifier operations. Add would represent ADDITION Multiply would represent MULTIPLY_TOTAL Example of how Attribute Functions look like on the interface.","title":"Attribute Functions"},{"location":"data-attributes/datapack-setup/#entity-types_1","text":"For entity-types, you are able to target specific entities and modify their base-value . If you wanted to give a zombie 60 base health, you can do this! There is also a fallback value that is with the entity-type attribute entry, which shows the original base value loaded for that entity. If the value did not exist on an entity before, it will show as 0.0 . Example of how Entity Types look like on the interface.","title":"Entity Types"},{"location":"data-attributes/entity-types/","text":"This section covers how to add attributes to specific entity types , how to set the attribute's default values for that entity and how the JSON that does this is formatted. Overview \u00b6 Although attributes are registered to the game and include a fallback value , attributes are not added to entities by default. Attributes exist independent of entities, and only when added as an entity attribute instance (like a wrapper) is the entity able to access and manipulate its value. Minecraft does this using two container objects: DefaultAttributeContainer (default attribute container) and AttributeContaine r (attribute container) - or similar, depending on mappings . The default attribute container is a statically built , immutable object that contains a mapping for all the attributes for a given entity type. All entities of the same entity type share the same default attribute container ; this is also where the default values for all attributes is defined. For entities of the same entity type to have unique values, Minecraft uses the attribute container . This object is yet another wrapper , holding the default attribute container and then applying/removing modifiers as needed for that entity. The attribute container is created when the entity is . Entity Types \u00b6 Every entity registered to the game has an entity type, which has a registry key associated with it (such as the player, which has the registry key minecraft:player ). This is important, as it lets as be specific about what attributes we add to what entity types . JSON Structure \u00b6 Using Datapacks , the entity_types.json file is used to add attributes to an entity type, as well as override the default (starting) value of already added attributes. This file is synonymous with the default attribute container ; additionally, the file acts similarly to Minecraft tags, which means that it doesn\u2019t override other datapack entity_types.json files, rather it forms a collection of entries. Its contents are structured as follows: { \"values\" : { \"<entity type registry key>\" : { \"<attribute registry key>\" : < nu merical de fault value> , ... } } } Example 1 \u00b6 Say we want to adjust the maximum health of the player to be 10 instead of the default 20 . We create the directory data/namespace/attributes/ where namespace is your modid , or some other unique string of characters if you are making a datapack. Inside of the directory, we add the json file entity_types.json , and populate it with the following: { \"values\" : { \"minecraft:player\" : { \"minecraft:generic.max_health\" : 10.0 } } } Note the presence of the full registry key for the max health attribute , and the full registry key for the entity type for the player. With that, the player will now have a max health of 10 . Example 2 \u00b6 Say we have our mod, examplemod , and we have just created (and registered) the attribute Max Mana . We want to add it to the witch mob and for it to have a default value of 30 . Firstly, we know that the attribute\u2019s registry key is examplemod:max_mana and the witch entity type\u2019s registry key is minecraft:witch . We again go to the directory data/examplemod/attributes/ and add the JSON file entity_types.json .` Inside the file we add: { \"values\" : { \"minecraft:witch\" : { \"examplemod:max_mana\" : 30.0 } } } Now the witch has the attribute Max Mana with a default value of 30 . Example 3 \u00b6 Perhaps we wish to add the Max Mana attribute to the Player as well; additionally, we want to set the default Max Health of the player to 10 and give Creepers 4 Armor : { \"values\" : { \"minecraft:witch\" : { \"examplemod:max_mana\" : 30.0 }, \"minecraft:player\" : { \"examplemod:max_mana\" : 30.0 , \"minecraft:generic.max_health\" : 10.0 }, \"minecraft:creeper\" : { \"minecraft:generic.armor\" : 4.0 } } } Additional Information \u00b6 The entity_types.json resource is loaded after the Minecraft (and modded) default attribute containers are created. Therefore, these files will always add to and/or override the contents of the hardcoded default attribute containers. The entity_types.json file of a given mod or datapack can be overridden by creating your own file in the same directory , and then ensuring that your datapack is loaded last .","title":"Entity Types"},{"location":"data-attributes/entity-types/#overview","text":"Although attributes are registered to the game and include a fallback value , attributes are not added to entities by default. Attributes exist independent of entities, and only when added as an entity attribute instance (like a wrapper) is the entity able to access and manipulate its value. Minecraft does this using two container objects: DefaultAttributeContainer (default attribute container) and AttributeContaine r (attribute container) - or similar, depending on mappings . The default attribute container is a statically built , immutable object that contains a mapping for all the attributes for a given entity type. All entities of the same entity type share the same default attribute container ; this is also where the default values for all attributes is defined. For entities of the same entity type to have unique values, Minecraft uses the attribute container . This object is yet another wrapper , holding the default attribute container and then applying/removing modifiers as needed for that entity. The attribute container is created when the entity is .","title":"Overview"},{"location":"data-attributes/entity-types/#entity-types","text":"Every entity registered to the game has an entity type, which has a registry key associated with it (such as the player, which has the registry key minecraft:player ). This is important, as it lets as be specific about what attributes we add to what entity types .","title":"Entity Types"},{"location":"data-attributes/entity-types/#json-structure","text":"Using Datapacks , the entity_types.json file is used to add attributes to an entity type, as well as override the default (starting) value of already added attributes. This file is synonymous with the default attribute container ; additionally, the file acts similarly to Minecraft tags, which means that it doesn\u2019t override other datapack entity_types.json files, rather it forms a collection of entries. Its contents are structured as follows: { \"values\" : { \"<entity type registry key>\" : { \"<attribute registry key>\" : < nu merical de fault value> , ... } } }","title":"JSON Structure"},{"location":"data-attributes/entity-types/#example-1","text":"Say we want to adjust the maximum health of the player to be 10 instead of the default 20 . We create the directory data/namespace/attributes/ where namespace is your modid , or some other unique string of characters if you are making a datapack. Inside of the directory, we add the json file entity_types.json , and populate it with the following: { \"values\" : { \"minecraft:player\" : { \"minecraft:generic.max_health\" : 10.0 } } } Note the presence of the full registry key for the max health attribute , and the full registry key for the entity type for the player. With that, the player will now have a max health of 10 .","title":"Example 1"},{"location":"data-attributes/entity-types/#example-2","text":"Say we have our mod, examplemod , and we have just created (and registered) the attribute Max Mana . We want to add it to the witch mob and for it to have a default value of 30 . Firstly, we know that the attribute\u2019s registry key is examplemod:max_mana and the witch entity type\u2019s registry key is minecraft:witch . We again go to the directory data/examplemod/attributes/ and add the JSON file entity_types.json .` Inside the file we add: { \"values\" : { \"minecraft:witch\" : { \"examplemod:max_mana\" : 30.0 } } } Now the witch has the attribute Max Mana with a default value of 30 .","title":"Example 2"},{"location":"data-attributes/entity-types/#example-3","text":"Perhaps we wish to add the Max Mana attribute to the Player as well; additionally, we want to set the default Max Health of the player to 10 and give Creepers 4 Armor : { \"values\" : { \"minecraft:witch\" : { \"examplemod:max_mana\" : 30.0 }, \"minecraft:player\" : { \"examplemod:max_mana\" : 30.0 , \"minecraft:generic.max_health\" : 10.0 }, \"minecraft:creeper\" : { \"minecraft:generic.armor\" : 4.0 } } }","title":"Example 3"},{"location":"data-attributes/entity-types/#additional-information","text":"The entity_types.json resource is loaded after the Minecraft (and modded) default attribute containers are created. Therefore, these files will always add to and/or override the contents of the hardcoded default attribute containers. The entity_types.json file of a given mod or datapack can be overridden by creating your own file in the same directory , and then ensuring that your datapack is loaded last .","title":"Additional Information"},{"location":"data-attributes/home/","text":"Data Attributes \u00b6 What is Data Attributes? \u00b6 Initially released for Minecraft 1.17.1 via the Fabric ecosystem, serves two main purposes: Revamps Minecraft's entity attribute system to be more flexible and inclusive of follow-on attributes, a feature common in many other games. Enables the manipulation of entity attributes through data-packs and a main configuration, offering server and pack creators straightforward customization of every facet of the entity attribute system. Integrating Data Attributes \u00b6 To add Data Atrributes to your project, begin by including our maven in the repositories block of your build.gradle build.gradle repositories { maven { name = \"Modrinth\" url = \"https://api.modrinth.com/maven\" content { includeGroup \"maven.modrinth\" } } } dependencies { modImplementation \"maven.modrinth:data-attributes-directors-cut:<version>\" } Alternatively, if you're using Cursemaven: build.gradle repositories { maven { name = \"Cursemaven\" url = \"https://cursemaven.com\" } } dependencies { modImplementation \"curse.maven:data-attributes-directors-cut-955929:<version-file-id>\" } Then, declare the dependency inside your dependencies block and as well as the version you want to use inside your gradle.properties . build.gradle gradle.properties dependencies { modImplementation \"maven.modrinth:data-attributes-directors-cut:<version>\" } data_attributes=1.6.0 If you want to use a version other than the most current one, check the GitHub releases page Capabilities \u00b6 The mod allows customization of attributes and how they behave through configuration files and data-packs. Users of the mod can construct data-packs that are mod or world specific, while server hosts and individual players can utilize the config to adjust values that they want, and have them synchronize across all worlds in the instance. The way attributes are handled are changed through this mod, allowing for greater flexibility by changing and adding minimum and maximum ranges. Using the new config interface, users can add new entries with ease, and adjust values while in-game. Attributes in Vanilla Minecraft \u00b6 Firstly, entity attributes (of class EntityAttribute) , also known as attributes , are simple data structures in Minecraft. They consist of a translation key, fallback value, minimum value, and maximum value, all of which cannot be changed once set (immutable). Attributes are registered (added) to the game statically when it is first loaded; registered here means that a key (of class Identifier) is mapped to the value that is the attribute. After all attributes are loaded, the static instances are used in-game as keys themselves. Attribute instances (of class EntityAttributeInstance) are a wrapper data structure that holds three relevant objects: an attribute, which acts as a key or identifier for the attribute instance; a value, which is the mutable current value that the attribute instance represents; and a map, which contains attribute modifiers that determine the value. Attribute modifiers (of class EntityAttributeModifier) are another data structure that contains: a name; a uuid, which is used as a key/identifier for the modifier; an immutable value; and an operation (of class EntityAttribteModifier$Operation) that determines how the modifier is to use its value. The three operations are: Operation Result ADDITION \ud835\udd01 + \ud835\udcff MULTIPLY_BASE \ud835\udd01 + (\ud835\udd01 1 \u00d7 \ud835\udcff) MULTIPLY_TOTAL \ud835\udd01 \u00d7 (1 + \ud835\udcff) Where \ud835\udd01 and \ud835\udcff are the attribute instance and attribute modifier values, respectively. Also of note is \ud835\udd01 1 , which represents the attribute instance\u2019s base value and any ADDITION modifiers; otherwise MULTIPLY_BASE and MULTIPLY_TOTAL would be the same. Default attribute containers (of class DefaultAttributeContainer) are another data structure that holds a map of attributes and attribute instances. They are immutable and mapped to entity types (of class EntityType). The purpose of default attribute containers is to provide a collection of attributes and default attribute values different entities. When an entity (of class LivingEntity in this case) is first created, it is representative of an entity type, and therefore has a default attribute container assigned to it. This sets the entity\u2019s default/starting health, for example. However, default attribute containers are immutable, as previously mentioned. This is not suitable for changing attribute values i.e. modifiers. Therefore, Minecraft provides the attribute container (of class AttributeContainer) . This is a wrapper structure that holds a default attribute container as a fallback, as well as its own map of attributes and attribute instances. This map is mutable, and allows modifiers to be applied. Where \u201cof class\u201d is written, the class name is dependent on the mappings used. Attribute Hierarchy \u00b6 Diagram of how components relate to create the attributes system. Changes and Implementation \u00b6 Although all attributes are as functional as each other in-game, some are added differently under the hood. As of Data Attributes 2.*.* and above, attributes that are statically registered are usually the only ones that are meant to be targeted, due to concerns with instability on dynamically unregistering attributes. Changes to attributes through either the config, or data-packs can be reloaded while in an instance. Singleplayer Instances \u00b6 An individual in their own world can make changes on the interface or config directly through the json files, and use the /reload command. Server/Multiplayer Instances \u00b6 A server maintainer or owner can make changes through the config json , and use the /reload command. By using the /reload command, data-attributes will reload all configurations to reflect the updated config and apply the needed changes. For data-packs, any adjustments to them will also be applied. Data-packs are secondary to the main config, and can be overwritten by it. Data Attributes also uses attribute ids to hold attributes in attribute containers or attribute instances etc. While the attribute object may change, the id does not, even on reload and resync. This is at the core of what Data Attributes does: it mixes into attributes and their instances, exposing their ability to have their behaviors and ranges changed, allowing a fully dynamic, data-driven attributes system.","title":"Home"},{"location":"data-attributes/home/#data-attributes","text":"","title":"Data Attributes"},{"location":"data-attributes/home/#what-is-data-attributes","text":"Initially released for Minecraft 1.17.1 via the Fabric ecosystem, serves two main purposes: Revamps Minecraft's entity attribute system to be more flexible and inclusive of follow-on attributes, a feature common in many other games. Enables the manipulation of entity attributes through data-packs and a main configuration, offering server and pack creators straightforward customization of every facet of the entity attribute system.","title":"What is Data Attributes?"},{"location":"data-attributes/home/#integrating-data-attributes","text":"To add Data Atrributes to your project, begin by including our maven in the repositories block of your build.gradle build.gradle repositories { maven { name = \"Modrinth\" url = \"https://api.modrinth.com/maven\" content { includeGroup \"maven.modrinth\" } } } dependencies { modImplementation \"maven.modrinth:data-attributes-directors-cut:<version>\" } Alternatively, if you're using Cursemaven: build.gradle repositories { maven { name = \"Cursemaven\" url = \"https://cursemaven.com\" } } dependencies { modImplementation \"curse.maven:data-attributes-directors-cut-955929:<version-file-id>\" } Then, declare the dependency inside your dependencies block and as well as the version you want to use inside your gradle.properties . build.gradle gradle.properties dependencies { modImplementation \"maven.modrinth:data-attributes-directors-cut:<version>\" } data_attributes=1.6.0 If you want to use a version other than the most current one, check the GitHub releases page","title":"Integrating Data Attributes"},{"location":"data-attributes/home/#capabilities","text":"The mod allows customization of attributes and how they behave through configuration files and data-packs. Users of the mod can construct data-packs that are mod or world specific, while server hosts and individual players can utilize the config to adjust values that they want, and have them synchronize across all worlds in the instance. The way attributes are handled are changed through this mod, allowing for greater flexibility by changing and adding minimum and maximum ranges. Using the new config interface, users can add new entries with ease, and adjust values while in-game.","title":"Capabilities"},{"location":"data-attributes/home/#attributes-in-vanilla-minecraft","text":"Firstly, entity attributes (of class EntityAttribute) , also known as attributes , are simple data structures in Minecraft. They consist of a translation key, fallback value, minimum value, and maximum value, all of which cannot be changed once set (immutable). Attributes are registered (added) to the game statically when it is first loaded; registered here means that a key (of class Identifier) is mapped to the value that is the attribute. After all attributes are loaded, the static instances are used in-game as keys themselves. Attribute instances (of class EntityAttributeInstance) are a wrapper data structure that holds three relevant objects: an attribute, which acts as a key or identifier for the attribute instance; a value, which is the mutable current value that the attribute instance represents; and a map, which contains attribute modifiers that determine the value. Attribute modifiers (of class EntityAttributeModifier) are another data structure that contains: a name; a uuid, which is used as a key/identifier for the modifier; an immutable value; and an operation (of class EntityAttribteModifier$Operation) that determines how the modifier is to use its value. The three operations are: Operation Result ADDITION \ud835\udd01 + \ud835\udcff MULTIPLY_BASE \ud835\udd01 + (\ud835\udd01 1 \u00d7 \ud835\udcff) MULTIPLY_TOTAL \ud835\udd01 \u00d7 (1 + \ud835\udcff) Where \ud835\udd01 and \ud835\udcff are the attribute instance and attribute modifier values, respectively. Also of note is \ud835\udd01 1 , which represents the attribute instance\u2019s base value and any ADDITION modifiers; otherwise MULTIPLY_BASE and MULTIPLY_TOTAL would be the same. Default attribute containers (of class DefaultAttributeContainer) are another data structure that holds a map of attributes and attribute instances. They are immutable and mapped to entity types (of class EntityType). The purpose of default attribute containers is to provide a collection of attributes and default attribute values different entities. When an entity (of class LivingEntity in this case) is first created, it is representative of an entity type, and therefore has a default attribute container assigned to it. This sets the entity\u2019s default/starting health, for example. However, default attribute containers are immutable, as previously mentioned. This is not suitable for changing attribute values i.e. modifiers. Therefore, Minecraft provides the attribute container (of class AttributeContainer) . This is a wrapper structure that holds a default attribute container as a fallback, as well as its own map of attributes and attribute instances. This map is mutable, and allows modifiers to be applied. Where \u201cof class\u201d is written, the class name is dependent on the mappings used.","title":"Attributes in Vanilla Minecraft"},{"location":"data-attributes/home/#attribute-hierarchy","text":"Diagram of how components relate to create the attributes system.","title":"Attribute Hierarchy"},{"location":"data-attributes/home/#changes-and-implementation","text":"Although all attributes are as functional as each other in-game, some are added differently under the hood. As of Data Attributes 2.*.* and above, attributes that are statically registered are usually the only ones that are meant to be targeted, due to concerns with instability on dynamically unregistering attributes. Changes to attributes through either the config, or data-packs can be reloaded while in an instance.","title":"Changes and Implementation"},{"location":"data-attributes/home/#singleplayer-instances","text":"An individual in their own world can make changes on the interface or config directly through the json files, and use the /reload command.","title":"Singleplayer Instances"},{"location":"data-attributes/home/#servermultiplayer-instances","text":"A server maintainer or owner can make changes through the config json , and use the /reload command. By using the /reload command, data-attributes will reload all configurations to reflect the updated config and apply the needed changes. For data-packs, any adjustments to them will also be applied. Data-packs are secondary to the main config, and can be overwritten by it. Data Attributes also uses attribute ids to hold attributes in attribute containers or attribute instances etc. While the attribute object may change, the id does not, even on reload and resync. This is at the core of what Data Attributes does: it mixes into attributes and their instances, exposing their ability to have their behaviors and ranges changed, allowing a fully dynamic, data-driven attributes system.","title":"Server/Multiplayer Instances"},{"location":"data-attributes/overrides/","text":"JSON overrides can be used to either override pre-existing attributes, either vanilla or modded , or if non-existant a new attribute is created. Therefore, new entity attributes can be created using just JSON files. Overview \u00b6 Entity attributes have four data points that can be override using json files; see the following: enabled : Whether to enable an override or not. min : The minimum value that this attribute\u2019s instance is clamped to. max : The maximum value that this attribute\u2019s instance is clamped to. smoothness : Used when calculating the diminishing returns of Diminished attributes. When an override is set to Flat , this does not do anything. min_fallback : The deferred and prior minimum value that this attribute\u2019s instance is clamped to. max_fallback : The deferred and prior maximum value that this attribute\u2019s instance is clamped to. formula : Determines how different sources of the attribute value add together ( Flat or Diminished ). For diminished values, it is advised to use ranges from at least -1 to at most 1. format : Determines how the API formats the value when using the DataAttributesAPI#getFormattedValue function ( Flat or Percentage ). Example 1 \u00b6 Minecraft\u2019s Armor attribute (aka minecraft:generic.armor ) has the following: Its base value is 0.0 . It has a minimum of 0.0 , and a maximum of 30.0 . Say we want to change the maximum armor value to 100.0 . We need to know the attribute\u2019s registry key , which is comprised of a namespace and a path . In this case, the registry key is minecraft:generic.armor . For data-packs, in the directory data/<namespace>/data_attributes/overrides we create an overrides file with any overrided entries we want, and you can insert an armor entry. For configs, you will have to place an armor entry in the overrides.json5 or use the UI to add an entry targeting the armor attribute. \"minecraft:generic.armor\" : { \"enabled\" : true , \"min\" : 0.0 , \"max\" : 100.0 , \"smoothness\" : 1.0 , \"min_fallback\" : 0.0 , \"max_fallback\" : 30.0 , \"formula\" : \"Flat\" , \"format\" : \"Whole\" } That\u2019s it. Upon applying the data-pack or config, the maximum value for armor should be 100 . Example 2 \u00b6 Here we see how vanilla Minecraft\u2019s own Knockback Resistance attribute might be modified to be a Diminished type, with the Percentage format: \"minecraft:generic.knockback_resistance\" : { \"enabled\" : true , \"min\" : 0.0 , \"max\" : 1.0 , \"smoothness\" : 0.01 , \"formula\" : \"Diminished\" , \"format\" : \"Percentage\" } Although our attribute is registered to the game, it won\u2019t be present on any LivingEntity just yet. The next step is to attach it to an EntityAttribute 's container.","title":"Overrides"},{"location":"data-attributes/overrides/#overview","text":"Entity attributes have four data points that can be override using json files; see the following: enabled : Whether to enable an override or not. min : The minimum value that this attribute\u2019s instance is clamped to. max : The maximum value that this attribute\u2019s instance is clamped to. smoothness : Used when calculating the diminishing returns of Diminished attributes. When an override is set to Flat , this does not do anything. min_fallback : The deferred and prior minimum value that this attribute\u2019s instance is clamped to. max_fallback : The deferred and prior maximum value that this attribute\u2019s instance is clamped to. formula : Determines how different sources of the attribute value add together ( Flat or Diminished ). For diminished values, it is advised to use ranges from at least -1 to at most 1. format : Determines how the API formats the value when using the DataAttributesAPI#getFormattedValue function ( Flat or Percentage ).","title":"Overview"},{"location":"data-attributes/overrides/#example-1","text":"Minecraft\u2019s Armor attribute (aka minecraft:generic.armor ) has the following: Its base value is 0.0 . It has a minimum of 0.0 , and a maximum of 30.0 . Say we want to change the maximum armor value to 100.0 . We need to know the attribute\u2019s registry key , which is comprised of a namespace and a path . In this case, the registry key is minecraft:generic.armor . For data-packs, in the directory data/<namespace>/data_attributes/overrides we create an overrides file with any overrided entries we want, and you can insert an armor entry. For configs, you will have to place an armor entry in the overrides.json5 or use the UI to add an entry targeting the armor attribute. \"minecraft:generic.armor\" : { \"enabled\" : true , \"min\" : 0.0 , \"max\" : 100.0 , \"smoothness\" : 1.0 , \"min_fallback\" : 0.0 , \"max_fallback\" : 30.0 , \"formula\" : \"Flat\" , \"format\" : \"Whole\" } That\u2019s it. Upon applying the data-pack or config, the maximum value for armor should be 100 .","title":"Example 1"},{"location":"data-attributes/overrides/#example-2","text":"Here we see how vanilla Minecraft\u2019s own Knockback Resistance attribute might be modified to be a Diminished type, with the Percentage format: \"minecraft:generic.knockback_resistance\" : { \"enabled\" : true , \"min\" : 0.0 , \"max\" : 1.0 , \"smoothness\" : 0.01 , \"formula\" : \"Diminished\" , \"format\" : \"Percentage\" } Although our attribute is registered to the game, it won\u2019t be present on any LivingEntity just yet. The next step is to attach it to an EntityAttribute 's container.","title":"Example 2"},{"location":"data-attributes/stacking-behavior/","text":"This section covers Stacking Behaviour, including: what it means; what it does; and how it's different from previous releases. Overview \u00b6 Stacking behaviour describes how attribute values add together. This is primarily a binary operator set as FLAT or DIMINISHING . Every attribute has a stacking behaviour. The Problem \u00b6 Without context, stacking behaviour may at first seem like some arbitrary overcomplication that serves no real purpose. However, stacking behaviour aims to solve a problem that arises with increased attribute configurability. By default, attributes add together linearly; if the total value of the attribute exceeds its maximum, the value is simply clamped. This works for most cases in Minecraft, but by expanding the attributes system a new need is revealed: diminishing returns. This is a term given to attributes that when increased, increase nonlinearly and with respect to their maximum value (the limit ). This is actually not a new concept - many games have diminishing returns with their attributes: Dota 2 with Evasion, for example. The goal is that when an attribute exists that has a maximum value (usually a value of 1, and usually percentage based) , it can be desirable to have diminishing returns such that infinity can be added to the attribute and its value still not reach its limit The Solution \u00b6 Firstly, it is important to differentiate between the two subsets of diminishing returns: diminishing addition and diminishing stacking . The former is when no matter how great a value is added to the attributes, its value never reaches its limit, and furthermore the result is scaled depending on how great the addition was and how close to the limit the current value is. The latter is when two different sources of the same attribute are added, and the attributes value never reaches its limit. The difference is subtle, but it boils down to whether the addition was from multiple different sources or not. What are different sources? An example of different sources is Iron Boots providing +2 Armor , and an Iron Chestplate providing +6 Armor . Diminishing addition always encompasses diminishing stacking, but the reverse is not true. Secondly, the implementation of diminishing returns must be reversible and commutative. This means that the order in which multiple values are added should be irrelevant. \\[ f(a,b)=f(b,a) \\] Reversibility here refers to how the addition function handles negative numbers. For example, given two numbers \ud835\udc82 and \ud835\udc83 add together to produce \ud835\udc84 , either input subtracted from \ud835\udc84 should result in the other input. This may seem obvious at first, but this is actually a substantial hurdle in creating a working diminishing attributes system, as often the addition function cannot or does not consider negative numbers. Adding a and b produces c, just as subtracting a from c produces b. Thirdly, the implementation of diminishing returns can be very different. Indeed, this implementation has changed for every major version of Data Attributes. A limit of 1.0 has been assumed throughout this explanation. Changes from Previous Releases \u00b6 The first release of Data Attributes included diminishing addition; however, the formula was non-reversible and not commutative . Because of this, the next update changed the system to use diminishing stacking only. This too, had its issues. While it worked as intended, the lack of diminishing addition was apparent and posed a problem. The advantage of the first system was that no matter how large any single value added was, it always scaled depending on the limit. Whereas with the second iteration this was only a feature with different sources of the attribute. The third iteration (of which you are presently reading) reimplemented finally diminishing addition , while maintaing reversibility and being commutative. Behavior \u00b6 Stacking Behavior is split into the following: The FLAT stacking behaviour describes normal addition and functions as: \\[ a + b = r \\] Where \ud835\udc82 and \ud835\udc83 are the attribute values and \ud835\udc93 is the result. For example, you have an Iron Helmet that provides +2 armor and an Iron Chestplate that provides +6 . When added together you get 8 armor . \\[ 2+6=8 \\] The DIMINISHING stacking behaviour describes a non-linear addition function , and only works for attributes with a minimum value of between -1 and 0 (all inclusive), and a maximum value of 1 (inclusive). This is primarily useful for percentage based attributes. The exact maths behind this is slightly complex, but it can be broadly summarised with the following equation: \\[ (1-v_2)\\times(1-m)^\\frac{v-v_2}{m}-(1-k_2)\\times(1-m)^\\frac{k-k_2}{m}=r \\] Where \ud835\udc93 is the result; \ud835\udcf6 is the attribute\u2019s increment value ; and \ud835\udcff, \ud835\udcf4, \ud835\udcff 2 and \ud835\udcf4 2 are as follows: \\[ v=\\sum_{}^{} |x|\\;\\;\\{x<0\\} \\] \\[ k=\\sum_{}^{} |x|\\;\\;\\{x>0\\} \\] \\[ v_2=\\max(|x|)\\;\\;\\{x<0\\} \\] \\[ k_2=\\max(|x|)\\;\\;\\{x>0\\} \\] \ud835\udcff 2 and \ud835\udcf4 2 do not consider the attribute\u2019s parent values. Let\u2019s look at what happens when we have an Iron Helmet that provides +20% Evasion , an Iron Chestplate that provide +30% Evasion and a negative potion effect that gives -10% Evasion (an assumption we make is that Evasion\u2019s minimum value is 0 , maximum value is 1 , and increment value is 0.01 ): \\[ (1-0.1)\\times(1-0.01)^\\frac{0.1-0.1}{0.01}-(1-0.3)\\times(1-0.01)^\\frac{0.5-0.3}{0.01}=0.327 \\] In other words, +30% +20% -10% Evasion yields +32.7% Evasion in total. One could also view it as +30% +20% Evasion yields +42.7% Evasion, and then -10% Evasion lowers it to +32.7% Evasion. Let\u2019s also look at what happens to our Knockback Resistance wearing a full set of Netherite Armor if we change the stacking behaviour from FLAT to DIMINISHING (assuming that the minimum value is 0 , maximum value is 1 and increment value is 0.01 ) Initially, a full set of Netherite Armor provides us with +0.4 , or +40 Knockback Resistance . We know this is actually x4 0.1 Knockback Resistance modifiers. \\[ (1-0)\\times(1-0.01)^\\frac{0-0}{0.01}-(1-0.1)\\times(1-0.01)^\\frac{0.4-0.1}{0.01}=0.334 \\] So, where +10% +10% +10% +10% yielded +40% , it now yields +33.4% - a marked reduction. However, the benefit to gameplay here is that we can add as much Knockback Resistance as we want now without any individual source of the attribute becoming irrelevant.","title":"Stacking Formula"},{"location":"data-attributes/stacking-behavior/#overview","text":"Stacking behaviour describes how attribute values add together. This is primarily a binary operator set as FLAT or DIMINISHING . Every attribute has a stacking behaviour.","title":"Overview"},{"location":"data-attributes/stacking-behavior/#the-problem","text":"Without context, stacking behaviour may at first seem like some arbitrary overcomplication that serves no real purpose. However, stacking behaviour aims to solve a problem that arises with increased attribute configurability. By default, attributes add together linearly; if the total value of the attribute exceeds its maximum, the value is simply clamped. This works for most cases in Minecraft, but by expanding the attributes system a new need is revealed: diminishing returns. This is a term given to attributes that when increased, increase nonlinearly and with respect to their maximum value (the limit ). This is actually not a new concept - many games have diminishing returns with their attributes: Dota 2 with Evasion, for example. The goal is that when an attribute exists that has a maximum value (usually a value of 1, and usually percentage based) , it can be desirable to have diminishing returns such that infinity can be added to the attribute and its value still not reach its limit","title":"The Problem"},{"location":"data-attributes/stacking-behavior/#the-solution","text":"Firstly, it is important to differentiate between the two subsets of diminishing returns: diminishing addition and diminishing stacking . The former is when no matter how great a value is added to the attributes, its value never reaches its limit, and furthermore the result is scaled depending on how great the addition was and how close to the limit the current value is. The latter is when two different sources of the same attribute are added, and the attributes value never reaches its limit. The difference is subtle, but it boils down to whether the addition was from multiple different sources or not. What are different sources? An example of different sources is Iron Boots providing +2 Armor , and an Iron Chestplate providing +6 Armor . Diminishing addition always encompasses diminishing stacking, but the reverse is not true. Secondly, the implementation of diminishing returns must be reversible and commutative. This means that the order in which multiple values are added should be irrelevant. \\[ f(a,b)=f(b,a) \\] Reversibility here refers to how the addition function handles negative numbers. For example, given two numbers \ud835\udc82 and \ud835\udc83 add together to produce \ud835\udc84 , either input subtracted from \ud835\udc84 should result in the other input. This may seem obvious at first, but this is actually a substantial hurdle in creating a working diminishing attributes system, as often the addition function cannot or does not consider negative numbers. Adding a and b produces c, just as subtracting a from c produces b. Thirdly, the implementation of diminishing returns can be very different. Indeed, this implementation has changed for every major version of Data Attributes. A limit of 1.0 has been assumed throughout this explanation.","title":"The Solution"},{"location":"data-attributes/stacking-behavior/#changes-from-previous-releases","text":"The first release of Data Attributes included diminishing addition; however, the formula was non-reversible and not commutative . Because of this, the next update changed the system to use diminishing stacking only. This too, had its issues. While it worked as intended, the lack of diminishing addition was apparent and posed a problem. The advantage of the first system was that no matter how large any single value added was, it always scaled depending on the limit. Whereas with the second iteration this was only a feature with different sources of the attribute. The third iteration (of which you are presently reading) reimplemented finally diminishing addition , while maintaing reversibility and being commutative.","title":"Changes from Previous Releases"},{"location":"data-attributes/stacking-behavior/#behavior","text":"Stacking Behavior is split into the following: The FLAT stacking behaviour describes normal addition and functions as: \\[ a + b = r \\] Where \ud835\udc82 and \ud835\udc83 are the attribute values and \ud835\udc93 is the result. For example, you have an Iron Helmet that provides +2 armor and an Iron Chestplate that provides +6 . When added together you get 8 armor . \\[ 2+6=8 \\] The DIMINISHING stacking behaviour describes a non-linear addition function , and only works for attributes with a minimum value of between -1 and 0 (all inclusive), and a maximum value of 1 (inclusive). This is primarily useful for percentage based attributes. The exact maths behind this is slightly complex, but it can be broadly summarised with the following equation: \\[ (1-v_2)\\times(1-m)^\\frac{v-v_2}{m}-(1-k_2)\\times(1-m)^\\frac{k-k_2}{m}=r \\] Where \ud835\udc93 is the result; \ud835\udcf6 is the attribute\u2019s increment value ; and \ud835\udcff, \ud835\udcf4, \ud835\udcff 2 and \ud835\udcf4 2 are as follows: \\[ v=\\sum_{}^{} |x|\\;\\;\\{x<0\\} \\] \\[ k=\\sum_{}^{} |x|\\;\\;\\{x>0\\} \\] \\[ v_2=\\max(|x|)\\;\\;\\{x<0\\} \\] \\[ k_2=\\max(|x|)\\;\\;\\{x>0\\} \\] \ud835\udcff 2 and \ud835\udcf4 2 do not consider the attribute\u2019s parent values. Let\u2019s look at what happens when we have an Iron Helmet that provides +20% Evasion , an Iron Chestplate that provide +30% Evasion and a negative potion effect that gives -10% Evasion (an assumption we make is that Evasion\u2019s minimum value is 0 , maximum value is 1 , and increment value is 0.01 ): \\[ (1-0.1)\\times(1-0.01)^\\frac{0.1-0.1}{0.01}-(1-0.3)\\times(1-0.01)^\\frac{0.5-0.3}{0.01}=0.327 \\] In other words, +30% +20% -10% Evasion yields +32.7% Evasion in total. One could also view it as +30% +20% Evasion yields +42.7% Evasion, and then -10% Evasion lowers it to +32.7% Evasion. Let\u2019s also look at what happens to our Knockback Resistance wearing a full set of Netherite Armor if we change the stacking behaviour from FLAT to DIMINISHING (assuming that the minimum value is 0 , maximum value is 1 and increment value is 0.01 ) Initially, a full set of Netherite Armor provides us with +0.4 , or +40 Knockback Resistance . We know this is actually x4 0.1 Knockback Resistance modifiers. \\[ (1-0)\\times(1-0.01)^\\frac{0-0}{0.01}-(1-0.1)\\times(1-0.01)^\\frac{0.4-0.1}{0.01}=0.334 \\] So, where +10% +10% +10% +10% yielded +40% , it now yields +33.4% - a marked reduction. However, the benefit to gameplay here is that we can add as much Knockback Resistance as we want now without any individual source of the attribute becoming irrelevant.","title":"Behavior"},{"location":"opc/api/","text":"Structure & Overview \u00b6 Offline Player Cache offers a small API package, located at com.github.clevernucleus.opc.api and contains the following: \ud83d\udcc2api \u2523\ud83d\udcc4CacheableValue.java interface \u2517\ud83d\udcc4OfflinePlayerCache.java interface The contents of CacheableValue.java are available here . The contents of OfflinePlayerCache.java are shown below: Modifiers and Type Method/Field and Description public static final String` MODID The mod id. public static CacheableValue<V> register ( CacheableValue<V> key) Registers a cacheable value to the server: these are keys that instruct the server to cache some data from the players when they disconnect. public static T getOfflinePlayerCache ( MinecraftServer server, T fallback, Function<OfflinePlayerCache, T> function) Gains access to the offline player cache object. This should only be used on the logical server. V get ( UUID uuid, CacheableValue<V> key) If the player is offline and exists in the cache, retrieves the last cached value. If the player is online, retrieves the player's current value. V get ( String name, CacheableValue<V> key) If the player is offline and exists in the cache, retrieves the last cached value. If the player is online, retrieves the player's current value. Collection<UUID> playerIds () Returns all offline/cached AND online players' UUIDs. Collection<String> playerNames () Returns all offline/cached AND online players' names. boolean isPlayerCached ( UUID uuid) Tests if the player with the input UUID exists in the cache. boolean isPlayerCached ( String name) Tests if the player with the input name exists in the cache. Utilizing Offline Player Cache \u00b6 This section will use the cacheable value implementation shown here to further provide an example of how OPC could be used in a project: Registering a Cacheable Value \u00b6 import com.github.clevernucleus.opc.api.OfflinePlayerCache ; import net.fabricmc.api.ModInitializer ; public class ExampleMod implements ModInitializer { // Register our CurrentHealthValue from before. public static final CacheableValue < Float > CURRENT_HEALTH_VALUE = OfflinePlayerCache . register ( new CurrentHealthValue ()); @Override public void onInitialize () {} } That is all that is needed. Players will disconnect and their current health will be cached on the server, ready to be accessed at any time. An potential usage is with commands - in the next example, we create a new command: /example health <name> . Creating a Command with OPC \u00b6 public static void register ( CommandDispatcher < ServerCommandSource > dispatcher ) { LiteralCommandNode < ServerCommandSource > exampleNode = CommandManager . literal ( \"example\" ). build (); dispatcher . getRoot (). addChild ( exampleNode ); LiteralCommandNode < ServerCommandSource > currentHealthNode = CommandManager . literal ( \"health\" ). build (); exampleNode . addChild ( currentHealthNode ); ArgumentCommandNode < ServerCommandSource , String > nameNode = CommandManager . argument ( \"name\" , StringArgumentType . string ()). executes ( ctx -> { MinecraftServer server = ctx . getSource (). getServer (); return OfflinePlayerCache . getOfflinePlayerCache ( server , - 1 , opc -> { String player = StringArgumentType . getString ( ctx , \"name\" ); float health = opc . get ( player , ExampleMod . CURRENT_HEALTH_VALUE ); LiteralText msg = new LiteralText ( player + \"'s current health is: \" + health ); ctx . getSource . sendFeedback ( msg , false ); return 1 ; }); }). build (); currentHealthNode . addChild ( nameNode ); } Using examples A and B , we have added the command /example health <name> . The output of which is <name>'s health is: <health> . You can now effectively get the current health of all online and offline players on your server. This is obviously a very simplistic example: usually you would also add a command node to take a UUID argument in addition to the player's name ; and you would have a suggestion provider to give you all player names/uuids.","title":"API"},{"location":"opc/api/#structure-overview","text":"Offline Player Cache offers a small API package, located at com.github.clevernucleus.opc.api and contains the following: \ud83d\udcc2api \u2523\ud83d\udcc4CacheableValue.java interface \u2517\ud83d\udcc4OfflinePlayerCache.java interface The contents of CacheableValue.java are available here . The contents of OfflinePlayerCache.java are shown below: Modifiers and Type Method/Field and Description public static final String` MODID The mod id. public static CacheableValue<V> register ( CacheableValue<V> key) Registers a cacheable value to the server: these are keys that instruct the server to cache some data from the players when they disconnect. public static T getOfflinePlayerCache ( MinecraftServer server, T fallback, Function<OfflinePlayerCache, T> function) Gains access to the offline player cache object. This should only be used on the logical server. V get ( UUID uuid, CacheableValue<V> key) If the player is offline and exists in the cache, retrieves the last cached value. If the player is online, retrieves the player's current value. V get ( String name, CacheableValue<V> key) If the player is offline and exists in the cache, retrieves the last cached value. If the player is online, retrieves the player's current value. Collection<UUID> playerIds () Returns all offline/cached AND online players' UUIDs. Collection<String> playerNames () Returns all offline/cached AND online players' names. boolean isPlayerCached ( UUID uuid) Tests if the player with the input UUID exists in the cache. boolean isPlayerCached ( String name) Tests if the player with the input name exists in the cache.","title":"Structure &amp; Overview"},{"location":"opc/api/#utilizing-offline-player-cache","text":"This section will use the cacheable value implementation shown here to further provide an example of how OPC could be used in a project:","title":"Utilizing Offline Player Cache"},{"location":"opc/api/#registering-a-cacheable-value","text":"import com.github.clevernucleus.opc.api.OfflinePlayerCache ; import net.fabricmc.api.ModInitializer ; public class ExampleMod implements ModInitializer { // Register our CurrentHealthValue from before. public static final CacheableValue < Float > CURRENT_HEALTH_VALUE = OfflinePlayerCache . register ( new CurrentHealthValue ()); @Override public void onInitialize () {} } That is all that is needed. Players will disconnect and their current health will be cached on the server, ready to be accessed at any time. An potential usage is with commands - in the next example, we create a new command: /example health <name> .","title":"Registering a Cacheable Value"},{"location":"opc/api/#creating-a-command-with-opc","text":"public static void register ( CommandDispatcher < ServerCommandSource > dispatcher ) { LiteralCommandNode < ServerCommandSource > exampleNode = CommandManager . literal ( \"example\" ). build (); dispatcher . getRoot (). addChild ( exampleNode ); LiteralCommandNode < ServerCommandSource > currentHealthNode = CommandManager . literal ( \"health\" ). build (); exampleNode . addChild ( currentHealthNode ); ArgumentCommandNode < ServerCommandSource , String > nameNode = CommandManager . argument ( \"name\" , StringArgumentType . string ()). executes ( ctx -> { MinecraftServer server = ctx . getSource (). getServer (); return OfflinePlayerCache . getOfflinePlayerCache ( server , - 1 , opc -> { String player = StringArgumentType . getString ( ctx , \"name\" ); float health = opc . get ( player , ExampleMod . CURRENT_HEALTH_VALUE ); LiteralText msg = new LiteralText ( player + \"'s current health is: \" + health ); ctx . getSource . sendFeedback ( msg , false ); return 1 ; }); }). build (); currentHealthNode . addChild ( nameNode ); } Using examples A and B , we have added the command /example health <name> . The output of which is <name>'s health is: <health> . You can now effectively get the current health of all online and offline players on your server. This is obviously a very simplistic example: usually you would also add a command node to take a UUID argument in addition to the player's name ; and you would have a suggestion provider to give you all player names/uuids.","title":"Creating a Command with OPC"},{"location":"opc/cacheablevalue/","text":"This section details the content and implementation of the CachedPlayerKey from a developer perspective. The CachedPlayerKey is a type of key-wrapper hybrid. It serves to hold a generic type and provide a value of this type through a key-function map. Structure \u00b6 The CachedPlayerKey abstract class accepts a generic argument that represents its data type. For example, CachedPlayerKey<Integer> holds an Integer value. The interface has the following methods, where V denotes its generic type provided upon implementation of the class: Implementation Fabric Forge Returned Function Description V? get When the player is online, gets the value from the player. When the player disconnects, this is used to cache the value on the server. This may be nullable. V readFromNbt Reads the value from nbt . void writeToNbt Writes a value to a nbt . Identifier id Returns the key's registered Identifier . An example would be your_mod_id:your_key_name . Returned Function Description V? get When the player is online, gets the value from the player. When the player disconnects, this is used to cache the value on the server. This may be nullable. V readFromNbt Reads the value from nbt . void writeToNbt Writes a value to a nbt . ResourceLocation id Returns the key's registered ResourceLocation . An example would be your_mod_id:your_key_name . Creating & Registering Your Key \u00b6 For every value or piece of data that a mod wishes to cache, they must implement the CachedPlayerKey . The following implementation goes through the process in creating a theoretical LevelKey . Example Fabric Forge import com.bibireden.opc.api.CachedPlayerKey import net.minecraft.nbt.NbtCompound import net.minecraft.server.network.ServerPlayerEntity import net.minecraft.util.Identifier class LevelKey : CachedPlayerKey < Int > ( Identifier ( \"your-mod-id\" , \"your-key-path\" )) { override fun get ( player : ServerPlayerEntity ): Int { // this would be up to the end user's interpretation, so for now, anything will suffice. return 404 } override fun readFromNbt ( tag : NbtCompound ): Int { return tag . getInt ( \"level\" ) } override fun writeToNbt ( tag : NbtCompound , value : Any ) { // Due to some limitations, type checking cannot be provided for the second argument, but you can almost safely guarantee this value will be associated with your type-parameter. if ( value is Int ) tag . putInt ( \"level\" , value ) } } import com.bibireden.opc.api.CachedPlayerKey import net.minecraft.nbt.CompoundTag import net.minecraft.resources.ResourceLocation import net.minecraft.world.entity.player.Player class LevelKey : CachedPlayerKey < String > ( ResourceLocation ( \"your-mod-id\" , \"your-key-path\" )) { override fun get ( player : Player ): String { // this would be up to the end user's interpretation, so for now, anything will suffice. return \"playerex in forge when?\" } override fun readFromNbt ( tag : CompoundTag ): String { return tag . getString ( \"message\" ) } override fun writeToNbt ( tag : CompoundTag , value : Any ) { tag . putString ( \"message\" , value as String ) } } Now it's time to register your key! It is ideal you call upon the OfflinePlayerCacheAPI 's static register function in order to register the key properly. ExampleMod.kt val LEVEL_KEY = OfflinePlayerCacheAPI . register ( LevelKey ()) Notes \u00b6 If you are needing to check for equality between your derived class, you can override the equals method. This is left to you to implement yourself, we do not guarantee the equality of your instances as it is user-dependent on how you wish to go about that. You should try to ensure that the appropriate type is used in your generic. In the example above, Float is used because the return type of player#getHealth is a Float . Using Integer here would not be appropriate as you would lose data, and using Double here would also not be appropriate because the extra precision is not utilised.","title":"CachedPlayerKey"},{"location":"opc/cacheablevalue/#structure","text":"The CachedPlayerKey abstract class accepts a generic argument that represents its data type. For example, CachedPlayerKey<Integer> holds an Integer value. The interface has the following methods, where V denotes its generic type provided upon implementation of the class: Implementation Fabric Forge Returned Function Description V? get When the player is online, gets the value from the player. When the player disconnects, this is used to cache the value on the server. This may be nullable. V readFromNbt Reads the value from nbt . void writeToNbt Writes a value to a nbt . Identifier id Returns the key's registered Identifier . An example would be your_mod_id:your_key_name . Returned Function Description V? get When the player is online, gets the value from the player. When the player disconnects, this is used to cache the value on the server. This may be nullable. V readFromNbt Reads the value from nbt . void writeToNbt Writes a value to a nbt . ResourceLocation id Returns the key's registered ResourceLocation . An example would be your_mod_id:your_key_name .","title":"Structure"},{"location":"opc/cacheablevalue/#creating-registering-your-key","text":"For every value or piece of data that a mod wishes to cache, they must implement the CachedPlayerKey . The following implementation goes through the process in creating a theoretical LevelKey . Example Fabric Forge import com.bibireden.opc.api.CachedPlayerKey import net.minecraft.nbt.NbtCompound import net.minecraft.server.network.ServerPlayerEntity import net.minecraft.util.Identifier class LevelKey : CachedPlayerKey < Int > ( Identifier ( \"your-mod-id\" , \"your-key-path\" )) { override fun get ( player : ServerPlayerEntity ): Int { // this would be up to the end user's interpretation, so for now, anything will suffice. return 404 } override fun readFromNbt ( tag : NbtCompound ): Int { return tag . getInt ( \"level\" ) } override fun writeToNbt ( tag : NbtCompound , value : Any ) { // Due to some limitations, type checking cannot be provided for the second argument, but you can almost safely guarantee this value will be associated with your type-parameter. if ( value is Int ) tag . putInt ( \"level\" , value ) } } import com.bibireden.opc.api.CachedPlayerKey import net.minecraft.nbt.CompoundTag import net.minecraft.resources.ResourceLocation import net.minecraft.world.entity.player.Player class LevelKey : CachedPlayerKey < String > ( ResourceLocation ( \"your-mod-id\" , \"your-key-path\" )) { override fun get ( player : Player ): String { // this would be up to the end user's interpretation, so for now, anything will suffice. return \"playerex in forge when?\" } override fun readFromNbt ( tag : CompoundTag ): String { return tag . getString ( \"message\" ) } override fun writeToNbt ( tag : CompoundTag , value : Any ) { tag . putString ( \"message\" , value as String ) } } Now it's time to register your key! It is ideal you call upon the OfflinePlayerCacheAPI 's static register function in order to register the key properly. ExampleMod.kt val LEVEL_KEY = OfflinePlayerCacheAPI . register ( LevelKey ())","title":"Creating &amp; Registering Your Key"},{"location":"opc/cacheablevalue/#notes","text":"If you are needing to check for equality between your derived class, you can override the equals method. This is left to you to implement yourself, we do not guarantee the equality of your instances as it is user-dependent on how you wish to go about that. You should try to ensure that the appropriate type is used in your generic. In the example above, Float is used because the return type of player#getHealth is a Float . Using Integer here would not be appropriate as you would lose data, and using Double here would also not be appropriate because the extra precision is not utilised.","title":"Notes"},{"location":"opc/home/","text":"Offline Player Cache \u00b6 Offline Player Cache (OPC) is a Minecraft API mod built using the Fabric framework to allow caching player data on the server while the player is offline. This means that mods can use this API to access offline player's data. This was primarily developed as a way to allow global and persistent leaderboards for Minecraft servers that included offline players . Specific Use Cases \u00b6 OPC is designed to be used in conjunction with other mods. By itself it adds no content. PlayerEx uses it to cache players' levels when they disconnect from a server, so that server leaderboards that display player levels are persistent and not dependent on who is online at the time of viewing. Similar to a ' Ready Player One ' type situation - it would be odd if Parzival disappeard from the scoreboard every time he logged off. When the player logs back in, the cached value is removed and instead the real-time value is used. In the aforementioned case, it is only an integer that is cached/used . However, anything can be cached, so long as it can be read from/written to nbt data. Furthermore, this data is not synced across to the client, which means developers do not need to be as mindful of nbt size. It should be noted that the functionality provided by this mod relies on players being using legitimate accounts and not cracked versions , as their uuid/name must be valid for their data to be cached. Commands \u00b6 OPC registers three commands to access and/or remove cached data: /opc get uuid|name <uuid|name> <key> Returns the input uuid/name player's value; if they are online, returns their current value, if they are offline returns their cached value. If the value is an instanceof Number and run from a command block, the redstone output is the absolute modulus of 16. /opc remove uuid|name <uuid|name> <key> If the input uuid/name player is offline, removes that player's cached value determined by the input key; if the player is online, does nothing. /opc remove uuid|name <uuid|name> If the input uuid/name player is offline, removes all of their cached data; if the player is online, does nothing. Integrating Offline Player Cache \u00b6 This mod can be accessed from its Github or Modrinth repositories; either by cloning and using a local maven repository via the publishToMavenLocal task, or by using the public maven repository provided by Modrinth (see: Modrinth Maven ), respectively. The latter is used below to show how OPC can be added to your project. In your build.gradle include the following: repositories { maven { name = \"Modrinth\" url = \"https://api.modrinth.com/maven\" content { includeGroup \"maven.modrinth\" } } } dependencies { modImplementation \"maven.modrinth:offline-player-cache:<version>\" include \"maven.modrinth:offline-player-cache:<version>\" } OPC is designed to be included in your project jar (jar-in-jar) , so it is recommended to use include .","title":"Home"},{"location":"opc/home/#offline-player-cache","text":"Offline Player Cache (OPC) is a Minecraft API mod built using the Fabric framework to allow caching player data on the server while the player is offline. This means that mods can use this API to access offline player's data. This was primarily developed as a way to allow global and persistent leaderboards for Minecraft servers that included offline players .","title":"Offline Player Cache"},{"location":"opc/home/#specific-use-cases","text":"OPC is designed to be used in conjunction with other mods. By itself it adds no content. PlayerEx uses it to cache players' levels when they disconnect from a server, so that server leaderboards that display player levels are persistent and not dependent on who is online at the time of viewing. Similar to a ' Ready Player One ' type situation - it would be odd if Parzival disappeard from the scoreboard every time he logged off. When the player logs back in, the cached value is removed and instead the real-time value is used. In the aforementioned case, it is only an integer that is cached/used . However, anything can be cached, so long as it can be read from/written to nbt data. Furthermore, this data is not synced across to the client, which means developers do not need to be as mindful of nbt size. It should be noted that the functionality provided by this mod relies on players being using legitimate accounts and not cracked versions , as their uuid/name must be valid for their data to be cached.","title":"Specific Use Cases"},{"location":"opc/home/#commands","text":"OPC registers three commands to access and/or remove cached data: /opc get uuid|name <uuid|name> <key> Returns the input uuid/name player's value; if they are online, returns their current value, if they are offline returns their cached value. If the value is an instanceof Number and run from a command block, the redstone output is the absolute modulus of 16. /opc remove uuid|name <uuid|name> <key> If the input uuid/name player is offline, removes that player's cached value determined by the input key; if the player is online, does nothing. /opc remove uuid|name <uuid|name> If the input uuid/name player is offline, removes all of their cached data; if the player is online, does nothing.","title":"Commands"},{"location":"opc/home/#integrating-offline-player-cache","text":"This mod can be accessed from its Github or Modrinth repositories; either by cloning and using a local maven repository via the publishToMavenLocal task, or by using the public maven repository provided by Modrinth (see: Modrinth Maven ), respectively. The latter is used below to show how OPC can be added to your project. In your build.gradle include the following: repositories { maven { name = \"Modrinth\" url = \"https://api.modrinth.com/maven\" content { includeGroup \"maven.modrinth\" } } } dependencies { modImplementation \"maven.modrinth:offline-player-cache:<version>\" include \"maven.modrinth:offline-player-cache:<version>\" } OPC is designed to be included in your project jar (jar-in-jar) , so it is recommended to use include .","title":"Integrating Offline Player Cache"},{"location":"playerex/api/","text":"Structure and Overview \u00b6 PlayerEx includes an API package, located at com.github.clevernucleus.playerex.api and contains the following: \ud83d\udcc2api \u2523\ud83d\udcc2client \u2503 \u2523\ud83d\udcc4ClientUtil.java class \u2503 \u2523\ud83d\udcc4PageLayer.java class \u2503 \u2523\ud83d\udcc4PageRegistry.java class \u2503 \u2517\ud83d\udcc4RenderComponent.java class \u2503 \u2523\ud83d\udcc2damage \u2503 \u2523\ud83d\udcc4DamageFunction.java interface \u2503 \u2517\ud83d\udcc4DamagePredicate.java interface \u2503 \u2523\ud83d\udcc2event \u2503 \u2523\ud83d\udcc4LivingEntityEvents.java class \u2503 \u2517\ud83d\udcc4PlayerEntityEvents.java class \u2503 \u2523\ud83d\udcc4EntityAttributeSupplier.java class \u2523\ud83d\udcc4ExAPI.java class \u2523\ud83d\udcc4ExConfig.java interface \u2523\ud83d\udcc4PacketType.java enum \u2517\ud83d\udcc4PlayerData.java interface The PlayerEx API can be split into four distinct sub-systems: the client-side page/tab registry, which exists to allow developers to add more inventory tabs and content to existing inventory pages; the damage-registry, which exists to allow developers to register damage handlers to better manipulate damage events; the LivingEntityEvents and PlayerEntityEvents classes, which provide developers useful hooks into attributes and specific methods; and finally, the attribute registry - which acts to provide developers with attribute suppliers and access to all the attributes PlayerEx adds. API Content \u00b6 The following subsections detail every method/field in each java class located in the api package. client.ClientUtil.java \u00b6 Modifiers and Type Method/Field and Description public static final DecimalFormat FORMATTING_2 Format for two decimal places. public static final DecimalFormat FORMATTING_3 Format for three decimal places. public static double displayValue ( Supplier<EntityAttribute> attribute, double value) Takes the input attribute and looks for the PERCENTAGE_PROPERTY property; if it is present, multiplies the input value by the property's multiplier. If not, then looks for the MULTIPLIER_PROPERTY property; if present, multiplies the input value by the property's multiplier. Else returns the input value. public static String formatValue ( Supplier<EntityAttribute> attribute, double value) If the input value is positive, adds the + prefix. If the input attribute has the PERCENTAGE_PROPERTY property, appends the % suffix. public static void appendChildrenToTooltip ( List<Text> tooltip, Supplier<EntityAttribute> attribute) Looks for the input attribute's functions, and if there are any, formats them and adds them to the input list as tooltips. public static void modifyAttributes ( PacketType type, Consumer<BiConsumer<EntityAttributeSupplier, Double>> ... consumers) Client-side. Sends a packet to the server to modify the attribute modifiers provided by PlayerEx by the input amount, and performs the checks and functions dictated by the PacketType (this logic is run on the server when it receives the packet). client.PageLayer.java \u00b6 Modifiers and Type Method/Field and Description protected final HandledScreen<?> parent Reference to the parent screen. public void render ( MatrixStack matrices, int mouseX, int mouseY, float delta) This is where text and tooltips can be rendered, in that order. public void drawBackground ( MatrixStack matrices, float delta, int mouseX, int mouseY) This is where textures and widgets can be rendered, in that order. client.PageRegistry.java \u00b6 Modifiers and Type Method/Field and Description public static void registerPage ( Identifier pageId, Identifier icon, Identifier texture, Text title) Registers a page and tab to the PlayerEx screen. public static void registerPage ( Identifier pageId, Identifier icon, Text title) Registers a page and tab to the PlayerEx screen, but with the default background. public static void registerLayer ( Identifier pageId, PageLayer.Builder builder) Registers a page layer to a page of the same input pageId. client.RenderComponent.java \u00b6 Modifiers and Type Method/Field and Description public static RenderComponent of ( Supplier<EntityAttribute> attribute, Function<LivingEntity, Text> function, Function<LivingEntity, List<Text>> tooltip, int dx, int dy) Creates a new RenderComponent object. public static RenderComponent of ( Function<LivingEntity, Text> function, Function<LivingEntity, List<Text>> tooltip, int dx, int dy) Creates a new RenderComponent object. private boolean isMouseOver ( float x, float y, float width, float height, int mouseX, int mouseY) Checks to see if the mouse is over the input area. public void renderText ( LivingEntity livingEntity, MatrixStack matrices, TextRenderer textRenderer, int x, int y, float scaleX, float scaleY) Renders the text from the input function. public void renderTooltip ( LivingEntity livingEntity, RenderTooltip consumer, MatrixStack matrices, TextRenderer textRenderer, int x, int y, int mouseX, int mouseY, float scaleX, float scaleY) Renders tooltip for the given text. damage.DamageFunction.java \u00b6 Modifiers and Type Method/Field and Description float apply ( LivingEntity livingEntity, DamageSource source, float damage) Using the input conditions, modifies the incoming damage (either reducing or increasing it) and returns the result. damage.DamagePredicate.java \u00b6 Modifiers and Type Method/Field and Description boolean test ( LivingEntity livingEntity, DamageSource source, float damage) Determines, using the input conditions, whether to apply the DamageFunction to the incoming damage of the LivingEntity . event.LivingEntityEvents.java \u00b6 Modifiers and Type Method/Field and Description public static final Event<Healed> ON_HEAL Fired before LivingEntity#heal ; allows the amount healed to be modified before healing happens. Setting the output to 0 is an unreliable way to negate incoming damage depending on other mods installed. Instead, use SHOULD_HEAL . public static final Event<Heal> SHOULD_HEAL Fired at the start of LivingEntity#heal , but before healing is applied. Can return false to cancel all healing, or true to allow it. public static final Event<Tick> EVERY_SECOND Fired once at the end of LivingEntity#tick , every 20 ticks (1 second). public static final Event<Damaged> ON_DAMAGE Fired before LivingEntity#damage ; allows the amount of damage to be modified before it is used in any way. Can be used to perform logic prior to the damage method, and can return the original damage to avoid modifying the value. The original value is the incoming damage, followed by the result of this event by any previous registries. Setting the output to 0 is an unreliable way to negate incoming damage depending on other mods installed. Instead, use SHOULD_DAMAGE . public static final Event<Damage> SHOULD_DAMAGE Fired after: LivingEntity#isInvulnerableTo``World#isClient``LivingEntity#isDead``DamageSource#isFire and LivingEntity#hasStatusEffect``LivingEntity#isSleeping but before all other logic is performed. Can be used to cancel the method and prevent damage from being taken by returning false. Returning true allows the logic to continue. public interface Healed {...} Nested functional interface for ON_HEAL . public interface Heal {...} Nested functional interface for SHOULD_HEAL . public interface Tick {...} Nested functional interface for EVERY_SECOND . public interface Damaged {...} Nested functional interface for ON_DAMAGE . public interface Damage {...} Nested functional interface for SHOULD_DAMAGE . event.PlayerEntityEvents.java \u00b6 Modifiers and Type Method/Field and Description public static final Event<AttackCritDamage> ON_CRIT Fired after the player lands a critical hit. The result is the damage. public static final Event<AttackCritBoolean> SHOULD_CRIT Fired when determining if the player's attack is critical. Return true if it is critical, return false if it is not. public interface AttackCritDamage {...} Nested functional interface for ON_DAMAGE . public interface AttackCritBoolean {...} Nested functional interface for SHOULD_DAMAGE . EntityAttributeSupplier.java \u00b6 Modifiers and Type Method/Field and Description private final Identifier identifier The attribute's identifier (data does not change, objects do). public static EntityAttributeSupplier of ( Identifier registryKey) Creates a new EntityAttributeSupplier object. public Identifier getId () Returns the supplier's attribute registry key. public EntityAttribute get () Returns the mapped EntityAttribute object in the games attribute registry if it exists for this supplier's registry key; otherwise, returns null. ExAPI.java \u00b6 Modifiers and Type Method/Field and Description public static final String MODID The PlayerEx mod id. public static final String INTEGER_PROPERTY Round value to integer property that is attached to some attributes. public static final String PERCENTAGE_PROPERTY Multiply value by property and append % symbol. public static final String MULTIPLY_PROPERTY Multiply value by property. public static final UUID PLAYEREX_MODIFIER_ID The UUID PlayerEx attribute modifiers use. public static final CacheableValue<Integer> LEVEL_VALUE The CacheableValue key for PlayerEx's player data.. public static final ComponentKey<PlayerData> PLAYER_DATA The Caridnal Components Key for PlayerEx player data. public static final EntityAttributeSupplier LEVEL The level attribute. public static final EntityAttributeSupplier CONSTITUTION The constitution attribute. public static final EntityAttributeSupplier STRENGTH The strength attribute. public static final EntityAttributeSupplier DEXTERITY The dexterity attribute. public static final EntityAttributeSupplier INTELLIGENCE The intelligence attribute. public static final EntityAttributeSupplier LUCKINESS The luckiness attribute. public static final EntityAttributeSupplier EVASION The evasion attribute. public static final EntityAttributeSupplier LIFESTEAL The lifesteal attribute. public static final EntityAttributeSupplier HEALTH_REGENERATION The health regeneration attribute. public static final EntityAttributeSupplier HEAL_AMPLIFICATION The heal amplification attribute. public static final EntityAttributeSupplier MELEE_CRIT_DAMAGE The melee crit damage attribute. public static final EntityAttributeSupplier MELEE_CRIT_CHANCE The melee crit chance attribute. public static final EntityAttributeSupplier RANGED_CRIT_DAMAGE The ranged crit damage attribute. public static final EntityAttributeSupplier RANGED_CRIT_CHANCE The ranged crit chance attribute. public static final EntityAttributeSupplier RANGED_DAMAGE The ranged damage attribute. public static final EntityAttributeSupplier FIRE_RESISTANCE The fire resistance attribute. public static final EntityAttributeSupplier FREEZE_RESISTANCE The freeze resistance attribute. public static final EntityAttributeSupplier LIGHTNING_RESISTANCE The lightning resistance attribute. public static final EntityAttributeSupplier POISON_RESISTANCE The poison resistance attribute. public static final EntityAttributeSupplier WITHER_RESISTANCE The wither resistance attribute. public static final EntityAttributeSupplier BREAKING_SPEED The breaking speed attribute. public static final EntityAttributeSupplier REACH_DISTANCE The reach distance attribute. This is not implemented by PlayerEx, but by JamieWhiteShirt's reach-entity-attributes. public static final EntityAttributeSupplier ATTACK_RANGE The attack range attribute. This is not implemented by PlayerEx, but by JamieWhiteShirt's reach-entity-attributes. public static ExConfig getConfig () Access to PlayerEx's config. public static void registerDamageModification ( DamagePredicate predicate, DamageFunction function) Registers a damage modification condition that is applied to living entities under specific circumstances. public static void registerRefundCondition ( BiFunction<PlayerData, PlayerEntity> refundCondition) Registers a refund condition. Refund conditions tell the game what can be refunded and what the maximum number of refund points are for a given circumstance. ExConfig.java \u00b6 Modifiers and Type Method/Field and Description boolean resetOnDeath () boolean isAttributesGuiDisabled () int skillPointsPerLevelUp () int requiredXp ( PlayerEntity player) float levelUpVolume () float skillUpVolume () float textScaleX () float textScaleY () PacketType.java \u00b6 Modifiers and Type Method/Field and Description public static final PacketType DEFAULT Does nothing extra - just allows the server to modify PlayerEx's attribute modifiers. public static final PacketType LEVEL Only allows modification if the player's experience levels are greater than or equal to the required xp to level up. Also removes those experience levels from the player and adds n skill points; where n is defined by config option skill points per level up. public static final PacketType SKILL Only allows modification if the player's skill points are greater than or equal to 1. Also subtracts one skill point from the player. public static final PacketType REFUND Only allows modification if the player's refund points are greater than or equal to 1. Also subtracts one refund point and adds one skill point. public static PacketType fromId ( byte id)Gets the correct PacketType from the input (or else DEFAULT ). public byte id ()Returns the PacketType 's id. public boolean test ( MinecraftServer server, ServerPlayerEntity player, PlayerData data)Runs the test function.","title":"API"},{"location":"playerex/api/#structure-and-overview","text":"PlayerEx includes an API package, located at com.github.clevernucleus.playerex.api and contains the following: \ud83d\udcc2api \u2523\ud83d\udcc2client \u2503 \u2523\ud83d\udcc4ClientUtil.java class \u2503 \u2523\ud83d\udcc4PageLayer.java class \u2503 \u2523\ud83d\udcc4PageRegistry.java class \u2503 \u2517\ud83d\udcc4RenderComponent.java class \u2503 \u2523\ud83d\udcc2damage \u2503 \u2523\ud83d\udcc4DamageFunction.java interface \u2503 \u2517\ud83d\udcc4DamagePredicate.java interface \u2503 \u2523\ud83d\udcc2event \u2503 \u2523\ud83d\udcc4LivingEntityEvents.java class \u2503 \u2517\ud83d\udcc4PlayerEntityEvents.java class \u2503 \u2523\ud83d\udcc4EntityAttributeSupplier.java class \u2523\ud83d\udcc4ExAPI.java class \u2523\ud83d\udcc4ExConfig.java interface \u2523\ud83d\udcc4PacketType.java enum \u2517\ud83d\udcc4PlayerData.java interface The PlayerEx API can be split into four distinct sub-systems: the client-side page/tab registry, which exists to allow developers to add more inventory tabs and content to existing inventory pages; the damage-registry, which exists to allow developers to register damage handlers to better manipulate damage events; the LivingEntityEvents and PlayerEntityEvents classes, which provide developers useful hooks into attributes and specific methods; and finally, the attribute registry - which acts to provide developers with attribute suppliers and access to all the attributes PlayerEx adds.","title":"Structure and Overview"},{"location":"playerex/api/#api-content","text":"The following subsections detail every method/field in each java class located in the api package.","title":"API Content"},{"location":"playerex/api/#clientclientutiljava","text":"Modifiers and Type Method/Field and Description public static final DecimalFormat FORMATTING_2 Format for two decimal places. public static final DecimalFormat FORMATTING_3 Format for three decimal places. public static double displayValue ( Supplier<EntityAttribute> attribute, double value) Takes the input attribute and looks for the PERCENTAGE_PROPERTY property; if it is present, multiplies the input value by the property's multiplier. If not, then looks for the MULTIPLIER_PROPERTY property; if present, multiplies the input value by the property's multiplier. Else returns the input value. public static String formatValue ( Supplier<EntityAttribute> attribute, double value) If the input value is positive, adds the + prefix. If the input attribute has the PERCENTAGE_PROPERTY property, appends the % suffix. public static void appendChildrenToTooltip ( List<Text> tooltip, Supplier<EntityAttribute> attribute) Looks for the input attribute's functions, and if there are any, formats them and adds them to the input list as tooltips. public static void modifyAttributes ( PacketType type, Consumer<BiConsumer<EntityAttributeSupplier, Double>> ... consumers) Client-side. Sends a packet to the server to modify the attribute modifiers provided by PlayerEx by the input amount, and performs the checks and functions dictated by the PacketType (this logic is run on the server when it receives the packet).","title":"client.ClientUtil.java"},{"location":"playerex/api/#clientpagelayerjava","text":"Modifiers and Type Method/Field and Description protected final HandledScreen<?> parent Reference to the parent screen. public void render ( MatrixStack matrices, int mouseX, int mouseY, float delta) This is where text and tooltips can be rendered, in that order. public void drawBackground ( MatrixStack matrices, float delta, int mouseX, int mouseY) This is where textures and widgets can be rendered, in that order.","title":"client.PageLayer.java"},{"location":"playerex/api/#clientpageregistryjava","text":"Modifiers and Type Method/Field and Description public static void registerPage ( Identifier pageId, Identifier icon, Identifier texture, Text title) Registers a page and tab to the PlayerEx screen. public static void registerPage ( Identifier pageId, Identifier icon, Text title) Registers a page and tab to the PlayerEx screen, but with the default background. public static void registerLayer ( Identifier pageId, PageLayer.Builder builder) Registers a page layer to a page of the same input pageId.","title":"client.PageRegistry.java"},{"location":"playerex/api/#clientrendercomponentjava","text":"Modifiers and Type Method/Field and Description public static RenderComponent of ( Supplier<EntityAttribute> attribute, Function<LivingEntity, Text> function, Function<LivingEntity, List<Text>> tooltip, int dx, int dy) Creates a new RenderComponent object. public static RenderComponent of ( Function<LivingEntity, Text> function, Function<LivingEntity, List<Text>> tooltip, int dx, int dy) Creates a new RenderComponent object. private boolean isMouseOver ( float x, float y, float width, float height, int mouseX, int mouseY) Checks to see if the mouse is over the input area. public void renderText ( LivingEntity livingEntity, MatrixStack matrices, TextRenderer textRenderer, int x, int y, float scaleX, float scaleY) Renders the text from the input function. public void renderTooltip ( LivingEntity livingEntity, RenderTooltip consumer, MatrixStack matrices, TextRenderer textRenderer, int x, int y, int mouseX, int mouseY, float scaleX, float scaleY) Renders tooltip for the given text.","title":"client.RenderComponent.java"},{"location":"playerex/api/#damagedamagefunctionjava","text":"Modifiers and Type Method/Field and Description float apply ( LivingEntity livingEntity, DamageSource source, float damage) Using the input conditions, modifies the incoming damage (either reducing or increasing it) and returns the result.","title":"damage.DamageFunction.java"},{"location":"playerex/api/#damagedamagepredicatejava","text":"Modifiers and Type Method/Field and Description boolean test ( LivingEntity livingEntity, DamageSource source, float damage) Determines, using the input conditions, whether to apply the DamageFunction to the incoming damage of the LivingEntity .","title":"damage.DamagePredicate.java"},{"location":"playerex/api/#eventlivingentityeventsjava","text":"Modifiers and Type Method/Field and Description public static final Event<Healed> ON_HEAL Fired before LivingEntity#heal ; allows the amount healed to be modified before healing happens. Setting the output to 0 is an unreliable way to negate incoming damage depending on other mods installed. Instead, use SHOULD_HEAL . public static final Event<Heal> SHOULD_HEAL Fired at the start of LivingEntity#heal , but before healing is applied. Can return false to cancel all healing, or true to allow it. public static final Event<Tick> EVERY_SECOND Fired once at the end of LivingEntity#tick , every 20 ticks (1 second). public static final Event<Damaged> ON_DAMAGE Fired before LivingEntity#damage ; allows the amount of damage to be modified before it is used in any way. Can be used to perform logic prior to the damage method, and can return the original damage to avoid modifying the value. The original value is the incoming damage, followed by the result of this event by any previous registries. Setting the output to 0 is an unreliable way to negate incoming damage depending on other mods installed. Instead, use SHOULD_DAMAGE . public static final Event<Damage> SHOULD_DAMAGE Fired after: LivingEntity#isInvulnerableTo``World#isClient``LivingEntity#isDead``DamageSource#isFire and LivingEntity#hasStatusEffect``LivingEntity#isSleeping but before all other logic is performed. Can be used to cancel the method and prevent damage from being taken by returning false. Returning true allows the logic to continue. public interface Healed {...} Nested functional interface for ON_HEAL . public interface Heal {...} Nested functional interface for SHOULD_HEAL . public interface Tick {...} Nested functional interface for EVERY_SECOND . public interface Damaged {...} Nested functional interface for ON_DAMAGE . public interface Damage {...} Nested functional interface for SHOULD_DAMAGE .","title":"event.LivingEntityEvents.java"},{"location":"playerex/api/#eventplayerentityeventsjava","text":"Modifiers and Type Method/Field and Description public static final Event<AttackCritDamage> ON_CRIT Fired after the player lands a critical hit. The result is the damage. public static final Event<AttackCritBoolean> SHOULD_CRIT Fired when determining if the player's attack is critical. Return true if it is critical, return false if it is not. public interface AttackCritDamage {...} Nested functional interface for ON_DAMAGE . public interface AttackCritBoolean {...} Nested functional interface for SHOULD_DAMAGE .","title":"event.PlayerEntityEvents.java"},{"location":"playerex/api/#entityattributesupplierjava","text":"Modifiers and Type Method/Field and Description private final Identifier identifier The attribute's identifier (data does not change, objects do). public static EntityAttributeSupplier of ( Identifier registryKey) Creates a new EntityAttributeSupplier object. public Identifier getId () Returns the supplier's attribute registry key. public EntityAttribute get () Returns the mapped EntityAttribute object in the games attribute registry if it exists for this supplier's registry key; otherwise, returns null.","title":"EntityAttributeSupplier.java"},{"location":"playerex/api/#exapijava","text":"Modifiers and Type Method/Field and Description public static final String MODID The PlayerEx mod id. public static final String INTEGER_PROPERTY Round value to integer property that is attached to some attributes. public static final String PERCENTAGE_PROPERTY Multiply value by property and append % symbol. public static final String MULTIPLY_PROPERTY Multiply value by property. public static final UUID PLAYEREX_MODIFIER_ID The UUID PlayerEx attribute modifiers use. public static final CacheableValue<Integer> LEVEL_VALUE The CacheableValue key for PlayerEx's player data.. public static final ComponentKey<PlayerData> PLAYER_DATA The Caridnal Components Key for PlayerEx player data. public static final EntityAttributeSupplier LEVEL The level attribute. public static final EntityAttributeSupplier CONSTITUTION The constitution attribute. public static final EntityAttributeSupplier STRENGTH The strength attribute. public static final EntityAttributeSupplier DEXTERITY The dexterity attribute. public static final EntityAttributeSupplier INTELLIGENCE The intelligence attribute. public static final EntityAttributeSupplier LUCKINESS The luckiness attribute. public static final EntityAttributeSupplier EVASION The evasion attribute. public static final EntityAttributeSupplier LIFESTEAL The lifesteal attribute. public static final EntityAttributeSupplier HEALTH_REGENERATION The health regeneration attribute. public static final EntityAttributeSupplier HEAL_AMPLIFICATION The heal amplification attribute. public static final EntityAttributeSupplier MELEE_CRIT_DAMAGE The melee crit damage attribute. public static final EntityAttributeSupplier MELEE_CRIT_CHANCE The melee crit chance attribute. public static final EntityAttributeSupplier RANGED_CRIT_DAMAGE The ranged crit damage attribute. public static final EntityAttributeSupplier RANGED_CRIT_CHANCE The ranged crit chance attribute. public static final EntityAttributeSupplier RANGED_DAMAGE The ranged damage attribute. public static final EntityAttributeSupplier FIRE_RESISTANCE The fire resistance attribute. public static final EntityAttributeSupplier FREEZE_RESISTANCE The freeze resistance attribute. public static final EntityAttributeSupplier LIGHTNING_RESISTANCE The lightning resistance attribute. public static final EntityAttributeSupplier POISON_RESISTANCE The poison resistance attribute. public static final EntityAttributeSupplier WITHER_RESISTANCE The wither resistance attribute. public static final EntityAttributeSupplier BREAKING_SPEED The breaking speed attribute. public static final EntityAttributeSupplier REACH_DISTANCE The reach distance attribute. This is not implemented by PlayerEx, but by JamieWhiteShirt's reach-entity-attributes. public static final EntityAttributeSupplier ATTACK_RANGE The attack range attribute. This is not implemented by PlayerEx, but by JamieWhiteShirt's reach-entity-attributes. public static ExConfig getConfig () Access to PlayerEx's config. public static void registerDamageModification ( DamagePredicate predicate, DamageFunction function) Registers a damage modification condition that is applied to living entities under specific circumstances. public static void registerRefundCondition ( BiFunction<PlayerData, PlayerEntity> refundCondition) Registers a refund condition. Refund conditions tell the game what can be refunded and what the maximum number of refund points are for a given circumstance.","title":"ExAPI.java"},{"location":"playerex/api/#exconfigjava","text":"Modifiers and Type Method/Field and Description boolean resetOnDeath () boolean isAttributesGuiDisabled () int skillPointsPerLevelUp () int requiredXp ( PlayerEntity player) float levelUpVolume () float skillUpVolume () float textScaleX () float textScaleY ()","title":"ExConfig.java"},{"location":"playerex/api/#packettypejava","text":"Modifiers and Type Method/Field and Description public static final PacketType DEFAULT Does nothing extra - just allows the server to modify PlayerEx's attribute modifiers. public static final PacketType LEVEL Only allows modification if the player's experience levels are greater than or equal to the required xp to level up. Also removes those experience levels from the player and adds n skill points; where n is defined by config option skill points per level up. public static final PacketType SKILL Only allows modification if the player's skill points are greater than or equal to 1. Also subtracts one skill point from the player. public static final PacketType REFUND Only allows modification if the player's refund points are greater than or equal to 1. Also subtracts one refund point and adds one skill point. public static PacketType fromId ( byte id)Gets the correct PacketType from the input (or else DEFAULT ). public byte id ()Returns the PacketType 's id. public boolean test ( MinecraftServer server, ServerPlayerEntity player, PlayerData data)Runs the test function.","title":"PacketType.java"},{"location":"playerex/faq/","text":"This page goes over commonly asked questions and provides some examples and mini-tutorials . It is advisable to see Data Attributes as well as to familiarise yourself with Minecraft's datapack system before continuing. How do I customise the Levelling Formula? \u00b6 The levelling formula is a mathematical function written as an expression that takes in one argument, \\(x\\) , and produces one output, \\(y\\) . By default, this function is expressed as follows: \\[y=stairs(x, 0.15, 2, 25, 10, 22)\\] Where \\(stairs(x,u,v,i,j,m)\\) is provided by the equation below: \\[y=\\min{(v\\times u\\times (x-i)-v\\times \\sin{(u\\times (x-i))}+j}{,m)}\\] When plotting this as a graph, \\(x\\) is the player's current PlayerEx level, and \\(y\\) is how many experience vanilla levels is needed to get to the next PlayerEx level. The default levelling formula. Using the graph, we can see that when first starting out it will take 1 vanilla experience level to gain a PlayerEx level. We can see that it will take 10 vanilla experience levels to gain another PlayerEx level while the player is at levels 20 - 30. Finally, we can see that the number of vanilla levels needed to gain another PlayerEx level is capped at 22. When entering an expression into the config, some functions are supported out of the box such as \\(\\sin\\) and \\(\\cos\\) - see here for a list of supported functions and constants. Note that the \\(x\\) variable, which represents the player's current PlayerEx level, must be included in your expression. The following are examples of the expression entered into the config: The Default Formula \u00b6 The default levelling formula, as discussed previously. stairs(x,0.15,2,25,10,22) A Constant Cost \u00b6 This formula makes it so that it always takes 4 vanilla levels to gain a PlayerEx level , regardless of how high a level you already are. x-x+4 The Exponential Formula \u00b6 This formula gives a relatively gentle exponential curve, where it costs 1 vanilla experience level to gain the first PlayerEx level , and 21 vanilla experience levels at level 20 . 1+0.05*x^2 Be careful to only input the right side into the config i.e. not `y=... How do I set a Max Level? \u00b6 By default the maximum achievable level is set to \\(2^{31}-1\\) , but is realistically limited by the levelling formula and how much experience the player can get. The best method to set a maximum level is to set the level attribute's max value using a datapack. For this example we will set the maximum level to 50. File-Folder Structure \u00b6 You need to create the following file-folder structure: \ud83d\udcc2anything.zip \u2523\ud83d\udcc4pack.mcmeta \u2517\ud83d\udcc2data \u2517\ud83d\udcc2playerex \u2517\ud83d\udcc2attributes \u2517\ud83d\udcc2overrides \u2517\ud83d\udcc4level.json Where anything can be named as you like - but it must not be playerex or minecraft . pack.mcmeta \u00b6 Your pack.mcmeta file needs the following json code: { \"pack\" : { \"pack_format\" : 15 , \"description\" : [ { \"text\" : \"ExamplePack\" , \"color\" : \"gold\" }, { \"text\" : \"\\nbibi-reden/PlayerEx\" , \"color\" : \"yellow\" } ] } } Take care to use the correct pack_format for the correct version of the game. For 1.20.1 it is 15. level.json \u00b6 { \"fallbackValue\" : 0.0 , \"minValue\" : 0.0 , \"maxValue\" : 50.0 , \"incrementValue\" : 0.0 , \"translationKey\" : \"playerex.attribute.name.level\" , \"stackingBehaviour\" : \"FLAT\" } Now use the datapack in your world, and the max level is 50 . How do I set the player's starting Max Health? \u00b6 You need to create the following file-folder structure: \ud83d\udcc2anything.zip \u2523\ud83d\udcc4pack.mcmeta \u2517\ud83d\udcc2data \u2517\ud83d\udcc2anything \u2517\ud83d\udcc2attributes \u2517\ud83d\udcc4entity_types.json Where anything can be named as you like - but it must not be playerex or minecraft . Follow the same pack.mcmeta from earlier above. entity_types.json \u00b6 Your entity_types.json file needs the following json code: { \"values\" : { \"minecraft:player\" : { \"minecraft:generic.max_health\" : 6.0 } } } Now use the datapack in your world, and the starting max health is `6 . How do I Revert Melee Crit Behaviour to Vanilla? \u00b6 PlayerEx subtly changes Minecraft's melee crit to be chance based, instead of on-jump. Furthermore, melee crit damage is also changed to be attribute based, instead of a flat x1.5 . This behaviour can be reverted with a datapack. You need to create the following file-folder structure: \ud83d\udcc2anything.zip \u2523\ud83d\udcc4pack.mcmeta \u2517\ud83d\udcc2data \u2517\ud83d\udcc2playerex \u2517\ud83d\udcc2attributes \u2523\ud83d\udcc4entity_types.json \u2517\ud83d\udcc4functions.json Follow the same pack.mcmeta from earlier above. entity_types.json Part 2 \u00b6 Your entity_types.json file needs the following json code: { \"values\" : { \"minecraft:player\" : { \"playerex:level\" : 0.0 , \"playerex:constitution\" : 0.0 , \"playerex:strength\" : 0.0 , \"playerex:dexterity\" : 0.0 , \"playerex:intelligence\" : 0.0 , \"playerex:luckiness\" : 0.0 , \"playerex:evasion\" : 0.0 , \"playerex:lifesteal\" : 0.0 , \"playerex:health_regeneration\" : 0.0 , \"playerex:heal_amplification\" : 0.0 , \"playerex:ranged_crit_damage\" : 0.0 , \"playerex:ranged_crit_chance\" : 0.0 , \"playerex:ranged_damage\" : 0.0 , \"playerex:fire_resistance\" : 0.0 , \"playerex:freeze_resistance\" : 0.0 , \"playerex:lightning_resistance\" : 0.0 , \"playerex:poison_resistance\" : 0.0 , \"playerex:wither_resistance\" : 0.0 , \"playerex:breaking_speed\" : 1.0 } } } This is exactly the same as the entity_types.json file that ships with PlayerEx, but without the two entries \"playerex:melee_crit_damage\": 0.0, and \"playerex:melee_crit_chance\": 0.0, . functions.json \u00b6 Your functions.json file needs the following json code: { \"values\" : { \"playerex:constitution\" : { \"minecraft:generic.max_health\" : 1.0 , \"minecraft:generic.knockback_resistance\" : 0.01 , \"playerex:poison_resistance\" : 0.01 }, \"playerex:strength\" : { \"minecraft:generic.attack_damage\" : 0.25 , \"minecraft:generic.armor\" : 0.5 , \"playerex:health_regeneration\" : 0.01 }, \"playerex:dexterity\" : { \"minecraft:generic.attack_speed\" : 0.1 , \"playerex:ranged_damage\" : 0.25 , \"playerex:lightning_resistance\" : 0.01 }, \"playerex:intelligence\" : { \"playerex:heal_amplification\" : 0.002 , \"playerex:ranged_crit_damage\" : 0.005 , \"playerex:wither_resistance\" : 0.01 }, \"playerex:luckiness\" : { \"minecraft:generic.luck\" : 0.1 , \"playerex:evasion\" : 0.02 , \"playerex:ranged_crit_chance\" : 0.02 } } } This is exactly the same as the functions.json file that ships with PlayerEx, but without the two entries \"playerex:melee_crit_damage\": 0.005, and \"playerex:melee_crit_chance\": 0.02, . Now use the datapack in your world, and the melee crit behaviour will be vanilla. Is there compatibility for darkmode GUI? \u00b6 Yes, this can be done with a resource pack. Textures for compatibility with Vanilla Tweaks Dark UI are available here . How does the chunk-based experience system work? \u00b6 Each chunk (16x16 block area) has three new numbers attached to it: the Experience Negation Factor; the Restorative Force; and the Restorative Force Interval . The goal of this system is to fix the problem of mob farms allowing for infinite levels . PlayerEx needed something that would limit how much experience players could collect in a given area in a given amount of time i.e., mob farms , whilst also not affecting modded dungeons which also use spawners. The Experience Negation Factor \u00b6 This value defaults to 1.0 and essentially describes the chance for experience orbs to spawn. A value of 1.0 guarantees that experience orbs spawn and a value of 0.0 guarantees that experience orbs do not spawn. Everytime an experience orb successfully spawns in a chunk, it multiplies that chunk's Experience Negation Factor by a value that is less than one - in other words, it reduces the chunk's Experience Negation Factor. This multiplier (i.e., how rapidly the chance for experience orbs to spawn decreases) is configurable; by default, the configurable multiplier value is 0.95 , but setting it to 1.0 causes this entire experience system to return to vanilla behaviour. When the chunk's Experience Negation Factor is reduced to less than 1.0 , the chance for subsequent experience orbs to spawn in that chunk is also reduced. The Restorative Force \u00b6 This value is a greater-than-one multiplier that acts to bring the chunk's Experience Negation Factor back up to 1.0 . Every Restorative Force Interval , the chunk's Experience Negation Factor is multiplied by its Restorative Force. This value is also configurable. The Restorative Force Interval \u00b6 This value is the number of ticks between each Restorative Event . A Restorative Event is the term used to describe when a chunk's Experience Negation Factor is increased (multiplied by the Restorative Force) . It should be noted that 20 ticks is 1 second . This value is configurable.","title":"FAQ"},{"location":"playerex/faq/#how-do-i-customise-the-levelling-formula","text":"The levelling formula is a mathematical function written as an expression that takes in one argument, \\(x\\) , and produces one output, \\(y\\) . By default, this function is expressed as follows: \\[y=stairs(x, 0.15, 2, 25, 10, 22)\\] Where \\(stairs(x,u,v,i,j,m)\\) is provided by the equation below: \\[y=\\min{(v\\times u\\times (x-i)-v\\times \\sin{(u\\times (x-i))}+j}{,m)}\\] When plotting this as a graph, \\(x\\) is the player's current PlayerEx level, and \\(y\\) is how many experience vanilla levels is needed to get to the next PlayerEx level. The default levelling formula. Using the graph, we can see that when first starting out it will take 1 vanilla experience level to gain a PlayerEx level. We can see that it will take 10 vanilla experience levels to gain another PlayerEx level while the player is at levels 20 - 30. Finally, we can see that the number of vanilla levels needed to gain another PlayerEx level is capped at 22. When entering an expression into the config, some functions are supported out of the box such as \\(\\sin\\) and \\(\\cos\\) - see here for a list of supported functions and constants. Note that the \\(x\\) variable, which represents the player's current PlayerEx level, must be included in your expression. The following are examples of the expression entered into the config:","title":"How do I customise the Levelling Formula?"},{"location":"playerex/faq/#the-default-formula","text":"The default levelling formula, as discussed previously. stairs(x,0.15,2,25,10,22)","title":"The Default Formula"},{"location":"playerex/faq/#a-constant-cost","text":"This formula makes it so that it always takes 4 vanilla levels to gain a PlayerEx level , regardless of how high a level you already are. x-x+4","title":"A Constant Cost"},{"location":"playerex/faq/#the-exponential-formula","text":"This formula gives a relatively gentle exponential curve, where it costs 1 vanilla experience level to gain the first PlayerEx level , and 21 vanilla experience levels at level 20 . 1+0.05*x^2 Be careful to only input the right side into the config i.e. not `y=...","title":"The Exponential Formula"},{"location":"playerex/faq/#how-do-i-set-a-max-level","text":"By default the maximum achievable level is set to \\(2^{31}-1\\) , but is realistically limited by the levelling formula and how much experience the player can get. The best method to set a maximum level is to set the level attribute's max value using a datapack. For this example we will set the maximum level to 50.","title":"How do I set a Max Level?"},{"location":"playerex/faq/#file-folder-structure","text":"You need to create the following file-folder structure: \ud83d\udcc2anything.zip \u2523\ud83d\udcc4pack.mcmeta \u2517\ud83d\udcc2data \u2517\ud83d\udcc2playerex \u2517\ud83d\udcc2attributes \u2517\ud83d\udcc2overrides \u2517\ud83d\udcc4level.json Where anything can be named as you like - but it must not be playerex or minecraft .","title":"File-Folder Structure"},{"location":"playerex/faq/#packmcmeta","text":"Your pack.mcmeta file needs the following json code: { \"pack\" : { \"pack_format\" : 15 , \"description\" : [ { \"text\" : \"ExamplePack\" , \"color\" : \"gold\" }, { \"text\" : \"\\nbibi-reden/PlayerEx\" , \"color\" : \"yellow\" } ] } } Take care to use the correct pack_format for the correct version of the game. For 1.20.1 it is 15.","title":"pack.mcmeta"},{"location":"playerex/faq/#leveljson","text":"{ \"fallbackValue\" : 0.0 , \"minValue\" : 0.0 , \"maxValue\" : 50.0 , \"incrementValue\" : 0.0 , \"translationKey\" : \"playerex.attribute.name.level\" , \"stackingBehaviour\" : \"FLAT\" } Now use the datapack in your world, and the max level is 50 .","title":"level.json"},{"location":"playerex/faq/#how-do-i-set-the-players-starting-max-health","text":"You need to create the following file-folder structure: \ud83d\udcc2anything.zip \u2523\ud83d\udcc4pack.mcmeta \u2517\ud83d\udcc2data \u2517\ud83d\udcc2anything \u2517\ud83d\udcc2attributes \u2517\ud83d\udcc4entity_types.json Where anything can be named as you like - but it must not be playerex or minecraft . Follow the same pack.mcmeta from earlier above.","title":"How do I set the player's starting Max Health?"},{"location":"playerex/faq/#entity_typesjson","text":"Your entity_types.json file needs the following json code: { \"values\" : { \"minecraft:player\" : { \"minecraft:generic.max_health\" : 6.0 } } } Now use the datapack in your world, and the starting max health is `6 .","title":"entity_types.json"},{"location":"playerex/faq/#how-do-i-revert-melee-crit-behaviour-to-vanilla","text":"PlayerEx subtly changes Minecraft's melee crit to be chance based, instead of on-jump. Furthermore, melee crit damage is also changed to be attribute based, instead of a flat x1.5 . This behaviour can be reverted with a datapack. You need to create the following file-folder structure: \ud83d\udcc2anything.zip \u2523\ud83d\udcc4pack.mcmeta \u2517\ud83d\udcc2data \u2517\ud83d\udcc2playerex \u2517\ud83d\udcc2attributes \u2523\ud83d\udcc4entity_types.json \u2517\ud83d\udcc4functions.json Follow the same pack.mcmeta from earlier above.","title":"How do I Revert Melee Crit Behaviour to Vanilla?"},{"location":"playerex/faq/#entity_typesjson-part-2","text":"Your entity_types.json file needs the following json code: { \"values\" : { \"minecraft:player\" : { \"playerex:level\" : 0.0 , \"playerex:constitution\" : 0.0 , \"playerex:strength\" : 0.0 , \"playerex:dexterity\" : 0.0 , \"playerex:intelligence\" : 0.0 , \"playerex:luckiness\" : 0.0 , \"playerex:evasion\" : 0.0 , \"playerex:lifesteal\" : 0.0 , \"playerex:health_regeneration\" : 0.0 , \"playerex:heal_amplification\" : 0.0 , \"playerex:ranged_crit_damage\" : 0.0 , \"playerex:ranged_crit_chance\" : 0.0 , \"playerex:ranged_damage\" : 0.0 , \"playerex:fire_resistance\" : 0.0 , \"playerex:freeze_resistance\" : 0.0 , \"playerex:lightning_resistance\" : 0.0 , \"playerex:poison_resistance\" : 0.0 , \"playerex:wither_resistance\" : 0.0 , \"playerex:breaking_speed\" : 1.0 } } } This is exactly the same as the entity_types.json file that ships with PlayerEx, but without the two entries \"playerex:melee_crit_damage\": 0.0, and \"playerex:melee_crit_chance\": 0.0, .","title":"entity_types.json Part 2"},{"location":"playerex/faq/#functionsjson","text":"Your functions.json file needs the following json code: { \"values\" : { \"playerex:constitution\" : { \"minecraft:generic.max_health\" : 1.0 , \"minecraft:generic.knockback_resistance\" : 0.01 , \"playerex:poison_resistance\" : 0.01 }, \"playerex:strength\" : { \"minecraft:generic.attack_damage\" : 0.25 , \"minecraft:generic.armor\" : 0.5 , \"playerex:health_regeneration\" : 0.01 }, \"playerex:dexterity\" : { \"minecraft:generic.attack_speed\" : 0.1 , \"playerex:ranged_damage\" : 0.25 , \"playerex:lightning_resistance\" : 0.01 }, \"playerex:intelligence\" : { \"playerex:heal_amplification\" : 0.002 , \"playerex:ranged_crit_damage\" : 0.005 , \"playerex:wither_resistance\" : 0.01 }, \"playerex:luckiness\" : { \"minecraft:generic.luck\" : 0.1 , \"playerex:evasion\" : 0.02 , \"playerex:ranged_crit_chance\" : 0.02 } } } This is exactly the same as the functions.json file that ships with PlayerEx, but without the two entries \"playerex:melee_crit_damage\": 0.005, and \"playerex:melee_crit_chance\": 0.02, . Now use the datapack in your world, and the melee crit behaviour will be vanilla.","title":"functions.json"},{"location":"playerex/faq/#is-there-compatibility-for-darkmode-gui","text":"Yes, this can be done with a resource pack. Textures for compatibility with Vanilla Tweaks Dark UI are available here .","title":"Is there compatibility for darkmode GUI?"},{"location":"playerex/faq/#how-does-the-chunk-based-experience-system-work","text":"Each chunk (16x16 block area) has three new numbers attached to it: the Experience Negation Factor; the Restorative Force; and the Restorative Force Interval . The goal of this system is to fix the problem of mob farms allowing for infinite levels . PlayerEx needed something that would limit how much experience players could collect in a given area in a given amount of time i.e., mob farms , whilst also not affecting modded dungeons which also use spawners.","title":"How does the chunk-based experience system work?"},{"location":"playerex/faq/#the-experience-negation-factor","text":"This value defaults to 1.0 and essentially describes the chance for experience orbs to spawn. A value of 1.0 guarantees that experience orbs spawn and a value of 0.0 guarantees that experience orbs do not spawn. Everytime an experience orb successfully spawns in a chunk, it multiplies that chunk's Experience Negation Factor by a value that is less than one - in other words, it reduces the chunk's Experience Negation Factor. This multiplier (i.e., how rapidly the chance for experience orbs to spawn decreases) is configurable; by default, the configurable multiplier value is 0.95 , but setting it to 1.0 causes this entire experience system to return to vanilla behaviour. When the chunk's Experience Negation Factor is reduced to less than 1.0 , the chance for subsequent experience orbs to spawn in that chunk is also reduced.","title":"The Experience Negation Factor"},{"location":"playerex/faq/#the-restorative-force","text":"This value is a greater-than-one multiplier that acts to bring the chunk's Experience Negation Factor back up to 1.0 . Every Restorative Force Interval , the chunk's Experience Negation Factor is multiplied by its Restorative Force. This value is also configurable.","title":"The Restorative Force"},{"location":"playerex/faq/#the-restorative-force-interval","text":"This value is the number of ticks between each Restorative Event . A Restorative Event is the term used to describe when a chunk's Experience Negation Factor is increased (multiplied by the Restorative Force) . It should be noted that 20 ticks is 1 second . This value is configurable.","title":"The Restorative Force Interval"},{"location":"playerex/home/","text":"PlayerEx \u00b6 PlayerEx is a Minecraft mod built using the Fabric ecosystem that adds RPG themed attributes to the game and the player. Integrating PlayerEx \u00b6 PlayerEx has a Curseforge and Modrinth page. To add PlayerEx to your project, insert the following into your build.gradle : build.gradle repositories { maven { name = \"Modrinth\" url = \"https://api.modrinth.com/maven\" content { includeGroup \"maven.modrinth\" } } } dependencies { modImplementation \"maven.modrinth:playerex-directors-cut:<version>>\" } Alternatively, if you're using Cursemaven: build.gradle repositories { maven { name = \"Cursemaven\" url = \"https://cursemaven.com\" } } dependencies { modImplementation \"curse.maven:playerex-directors-cut-958325:<version-file-id>\" } PlayerEx has multiple dependencies, so your build.gradle must accommodate this. Dependancies \u00b6 PlayerEx requires the following dependancies: Dependancy Purpose Fabric API Required by other dependencies and for certain events. Data Attributes: Directors Cut Provides the core attribute system and attribute configurability. Cardinal Components API (Base, Chunk, and Entity) A jar-in-jar dependency that provides player attribute modifiers. Cloth Config API Provides configurability. Offline Player Cache: Directors Cut A jar-in-jar dependency that provides TextPlaceholderAPI with persistent player data. Text Placeholder API A jar-in-jar dependency that provides text placeholders, namely for custom multiplayer leaderboards. exp4j A jar-in-jar dependency that provides levelling configurability, namely an expression parser.","title":"Home"},{"location":"playerex/home/#playerex","text":"PlayerEx is a Minecraft mod built using the Fabric ecosystem that adds RPG themed attributes to the game and the player.","title":"PlayerEx"},{"location":"playerex/home/#integrating-playerex","text":"PlayerEx has a Curseforge and Modrinth page. To add PlayerEx to your project, insert the following into your build.gradle : build.gradle repositories { maven { name = \"Modrinth\" url = \"https://api.modrinth.com/maven\" content { includeGroup \"maven.modrinth\" } } } dependencies { modImplementation \"maven.modrinth:playerex-directors-cut:<version>>\" } Alternatively, if you're using Cursemaven: build.gradle repositories { maven { name = \"Cursemaven\" url = \"https://cursemaven.com\" } } dependencies { modImplementation \"curse.maven:playerex-directors-cut-958325:<version-file-id>\" } PlayerEx has multiple dependencies, so your build.gradle must accommodate this.","title":"Integrating PlayerEx"},{"location":"playerex/home/#dependancies","text":"PlayerEx requires the following dependancies: Dependancy Purpose Fabric API Required by other dependencies and for certain events. Data Attributes: Directors Cut Provides the core attribute system and attribute configurability. Cardinal Components API (Base, Chunk, and Entity) A jar-in-jar dependency that provides player attribute modifiers. Cloth Config API Provides configurability. Offline Player Cache: Directors Cut A jar-in-jar dependency that provides TextPlaceholderAPI with persistent player data. Text Placeholder API A jar-in-jar dependency that provides text placeholders, namely for custom multiplayer leaderboards. exp4j A jar-in-jar dependency that provides levelling configurability, namely an expression parser.","title":"Dependancies"},{"location":"playerex/in-game-content/","text":"PlayerEx adds new attributes to the game, that are by default attached to the player. Additionally, PlayerEx features a new GUI screen and levelling system. Attributes \u00b6 PlayerEx adds fully functional attributes to the game. By default these attributes are only present on the player, but attributes with the Applicable Entity type LivingEntity can be attached to any living entity with datapacks - see Data Attributes . Attribute Registry Key Applicable Entity Stacking Behaviour Description Evasion playerex:evasion LivingEntity DIMINISHING The chance to dodge projectiles. Lifesteal playerex:lifesteal LivingEntity DIMINISHING A percentage of melee and ranged damage dealth is healed. Health Regeneration playerex:health_regeneration LivingEntity DIMINISHING Health passively healed every second. Heal Amplification playerex:heal_amplification LivingEntity DIMINISHING All healing is amplified by this amount. Melee Crit Damage playerex:melee_crit_damage PlayerEntity DIMINISHING Attack damage is multiplied by this amount on a melee critical hit. Melee Crit Chance playerex:melee_crit_chance PlayerEntity DIMINISHING The chance for a melee attack to be a critical hit. Ranged Crit Damage playerex:ranged_crit_damage LivingEntity DIMINISHING Projectile damage is multiplied by this amount on a rangd critical hit. Ranged Crit Chance playerex:ranged_crit_chance LivingEntity DIMINISHING The chance for a projectile fired to result in a critical hit. Ranged Bonus Damage playerex:ranged_damage LivingEntity FLAT Damage added to projectile base damage. Fire Resistance playerex:fire_resistance LivingEntity DIMINISHING Reduces fire damage by this amount (100% is immunity). Freeze Resistance playerex:freeze_resistance LivingEntity DIMINISHING Reduces freeze damage by this amount (100% is immunity). Lightning Resistance playerex:lightning_resistance LivingEntity DIMINISHING Reduces lightning damage by this amount (100% is immunity). Poison Resistance playerex:poison_resistance LivingEntity DIMINISHING Reduces poison damage by this amount (100% is immunity). Wither Resistance playerex:wither_resistance LivingEntity DIMINISHING Reduces wither damage by this amount (100% is immunity). Breaking Speed playerex:breaking_speed PlayerEntity FLAT Defines the player's base block breaking speed. Level playerex:level LivingEntity FLAT An RPG like level value attribute; does nothing. Constitution playerex:constitution LivingEntity FLAT An RPG like stat value used to increase other attributes: +1 Max Health +0.1 Knockback Resistance +0.1 Poison Resistance Strength playerex:strength LivingEntity FLAT An RPG like stat value used to increase other attributes: +0.25 Melee Attack Damage +0.5 Armor +0.01 Health Regen./s Dexterity playerex:dexterity LivingEntity FLAT An RPG like stat value used to increase other attributes: +0.1 Attack Speed +0.25 Ranged Damage +5% Melee Crit Damage +0.1 Lightning Resistance Intelligence playerex:intelligence LivingEntity FLAT An RPG like stat value used to increase other attributes: +2% Heal Amplification +5% Ranged Crit Damage +0.1 Wither Resistance Luckiness playerex:luckiness LivingEntity FLAT An RPG like stat value used to increase other attributes: +0.1 Luck +2% Evasion +2% Melee Crit Chance +2% Ranged Crit Chance Modified Vanilla Attributes \u00b6 Attribute Registry Key Modification Armor minecraft:generic.armor Increased max value from 30 to Integer.MAX_VALUE . Armor Toughness minecraft:generic.armor_toughness Increased max value from 20 to Integer.MAX_VALUE . Knockback Resistance minecraft:generic.knockback_resistance Changed stacking behaviour from FLAT (default) to DIMINISHING . Max Health minecraft:generic.max_health Changed max value from 1024 to Integer.MAX_VALUE . GUI \u00b6 PlayerEx adds tabs to the survival inventory that let the player navigate between their inventory, attributes screen and combat attributes screen. The latter of which allow the player to view their attributes and spend skill points to level up and increase certain attributes. These have an RPG theme. Added on inventory tabs and the main levelling tab. The Added on WizardEx Tab and the Combat Stat page. These can be also accesed with the R keybind. Config Options \u00b6 Most of PlayerEx's configurability is provided by Data Attributes in the form of datapacks, but there are some items that have a dedicated config - this is split into server and client items. The former requires restarting/reloading the world. Item Side Function Reset On Death SERVER On death, the player's attributes, level and skill points revert to their defaults. Disable Attributes GUI SERVER Hides inventory tabs, disables opening of/access to the attributes screen. Show Level Nameplates SERVER For every LivingEntity with the Level attribute, a nameplate displays above that entity rendering their level (for players on multiplayer this is just above the head but below the nametag, such that it does not interfere with health bar mods). Skill Points per Level SERVER How many Skill Points the player gets for each level up. Level Up Formula SERVER Dictates how many experience levels are required for the player to level up. Restorative Force Ticks SERVER The number of ticks between every restorative event. Note that 20 ticks is 1 second. Restorative Force SERVER The counter-balancing multiplier that acts to restore the XP Negation Factor to 1.0. XP Negation Factor SERVER The chance for xp orbs to drop in a given chunk. Setting this value to 100 causes vanilla behaviour. Level Up Volume CLIENT How loud the level up sound effect is (can be set to 0 to mute). Skill Up Volume CLIENT How loud the spend skill point sound effect is (can be set to 0 to mute). Horizontal Text Scale CLIENT How squished the text on the attributes/combat screen is in the horizontal direction (good for languages with long form translations). Vertical Text Scale CLIENT How squished the text on the attributes/combat screen is in the vertical direction (good for languages with long form translations). Tooltip Attributes CLIENT How weapon tooltips should display their Attack Damage/Speed attributes. By default, increasing your attack damage/speed is not reflected in the tooltip of these attributes - PlayerEx fixes this, but offers the option to choose between different solutions: 1. Does not fix the issue and leaves tooltips alone, i.e. if you had 5 attack damage, the tooltip of a sword would not show this. This option is available in the event that you are playing with another mod that changes tooltips, and would otherwise be incompatible.). 2. Displays attack damage/speed the same way attributes are displayed on tooltips, and only shows modifier values. 3. Displays the attack damage/speed in the vanilla way, but fixes the values so that they reflect the player's values. Commands \u00b6 Command Function /playerex levelup <player> [amount] Levels the input player up by the input amount. /playerex refund <player> [amount] Gives the input player the input number of refund points. /playerex reset <player> Resets all attributes and skill points on the input player to their defaults. /playerex skillAttribute <player> <attribute> <requires skill points> Skills the input attribute, provided the player has a Skill Point available if the final boolean argument is true, or regardless otherwise. /playerex refundAttribute <player> <attribute> <requires refund points> Refunds the input attribute, provided the player has a Refund Point available if the final boolean argument is true, or regardless otherwise. Also see commands available with Offline Player Cache , which is included with PlayerEx.","title":"In-game Content"},{"location":"playerex/in-game-content/#attributes","text":"PlayerEx adds fully functional attributes to the game. By default these attributes are only present on the player, but attributes with the Applicable Entity type LivingEntity can be attached to any living entity with datapacks - see Data Attributes . Attribute Registry Key Applicable Entity Stacking Behaviour Description Evasion playerex:evasion LivingEntity DIMINISHING The chance to dodge projectiles. Lifesteal playerex:lifesteal LivingEntity DIMINISHING A percentage of melee and ranged damage dealth is healed. Health Regeneration playerex:health_regeneration LivingEntity DIMINISHING Health passively healed every second. Heal Amplification playerex:heal_amplification LivingEntity DIMINISHING All healing is amplified by this amount. Melee Crit Damage playerex:melee_crit_damage PlayerEntity DIMINISHING Attack damage is multiplied by this amount on a melee critical hit. Melee Crit Chance playerex:melee_crit_chance PlayerEntity DIMINISHING The chance for a melee attack to be a critical hit. Ranged Crit Damage playerex:ranged_crit_damage LivingEntity DIMINISHING Projectile damage is multiplied by this amount on a rangd critical hit. Ranged Crit Chance playerex:ranged_crit_chance LivingEntity DIMINISHING The chance for a projectile fired to result in a critical hit. Ranged Bonus Damage playerex:ranged_damage LivingEntity FLAT Damage added to projectile base damage. Fire Resistance playerex:fire_resistance LivingEntity DIMINISHING Reduces fire damage by this amount (100% is immunity). Freeze Resistance playerex:freeze_resistance LivingEntity DIMINISHING Reduces freeze damage by this amount (100% is immunity). Lightning Resistance playerex:lightning_resistance LivingEntity DIMINISHING Reduces lightning damage by this amount (100% is immunity). Poison Resistance playerex:poison_resistance LivingEntity DIMINISHING Reduces poison damage by this amount (100% is immunity). Wither Resistance playerex:wither_resistance LivingEntity DIMINISHING Reduces wither damage by this amount (100% is immunity). Breaking Speed playerex:breaking_speed PlayerEntity FLAT Defines the player's base block breaking speed. Level playerex:level LivingEntity FLAT An RPG like level value attribute; does nothing. Constitution playerex:constitution LivingEntity FLAT An RPG like stat value used to increase other attributes: +1 Max Health +0.1 Knockback Resistance +0.1 Poison Resistance Strength playerex:strength LivingEntity FLAT An RPG like stat value used to increase other attributes: +0.25 Melee Attack Damage +0.5 Armor +0.01 Health Regen./s Dexterity playerex:dexterity LivingEntity FLAT An RPG like stat value used to increase other attributes: +0.1 Attack Speed +0.25 Ranged Damage +5% Melee Crit Damage +0.1 Lightning Resistance Intelligence playerex:intelligence LivingEntity FLAT An RPG like stat value used to increase other attributes: +2% Heal Amplification +5% Ranged Crit Damage +0.1 Wither Resistance Luckiness playerex:luckiness LivingEntity FLAT An RPG like stat value used to increase other attributes: +0.1 Luck +2% Evasion +2% Melee Crit Chance +2% Ranged Crit Chance","title":"Attributes"},{"location":"playerex/in-game-content/#modified-vanilla-attributes","text":"Attribute Registry Key Modification Armor minecraft:generic.armor Increased max value from 30 to Integer.MAX_VALUE . Armor Toughness minecraft:generic.armor_toughness Increased max value from 20 to Integer.MAX_VALUE . Knockback Resistance minecraft:generic.knockback_resistance Changed stacking behaviour from FLAT (default) to DIMINISHING . Max Health minecraft:generic.max_health Changed max value from 1024 to Integer.MAX_VALUE .","title":"Modified Vanilla Attributes"},{"location":"playerex/in-game-content/#gui","text":"PlayerEx adds tabs to the survival inventory that let the player navigate between their inventory, attributes screen and combat attributes screen. The latter of which allow the player to view their attributes and spend skill points to level up and increase certain attributes. These have an RPG theme. Added on inventory tabs and the main levelling tab. The Added on WizardEx Tab and the Combat Stat page. These can be also accesed with the R keybind.","title":"GUI"},{"location":"playerex/in-game-content/#config-options","text":"Most of PlayerEx's configurability is provided by Data Attributes in the form of datapacks, but there are some items that have a dedicated config - this is split into server and client items. The former requires restarting/reloading the world. Item Side Function Reset On Death SERVER On death, the player's attributes, level and skill points revert to their defaults. Disable Attributes GUI SERVER Hides inventory tabs, disables opening of/access to the attributes screen. Show Level Nameplates SERVER For every LivingEntity with the Level attribute, a nameplate displays above that entity rendering their level (for players on multiplayer this is just above the head but below the nametag, such that it does not interfere with health bar mods). Skill Points per Level SERVER How many Skill Points the player gets for each level up. Level Up Formula SERVER Dictates how many experience levels are required for the player to level up. Restorative Force Ticks SERVER The number of ticks between every restorative event. Note that 20 ticks is 1 second. Restorative Force SERVER The counter-balancing multiplier that acts to restore the XP Negation Factor to 1.0. XP Negation Factor SERVER The chance for xp orbs to drop in a given chunk. Setting this value to 100 causes vanilla behaviour. Level Up Volume CLIENT How loud the level up sound effect is (can be set to 0 to mute). Skill Up Volume CLIENT How loud the spend skill point sound effect is (can be set to 0 to mute). Horizontal Text Scale CLIENT How squished the text on the attributes/combat screen is in the horizontal direction (good for languages with long form translations). Vertical Text Scale CLIENT How squished the text on the attributes/combat screen is in the vertical direction (good for languages with long form translations). Tooltip Attributes CLIENT How weapon tooltips should display their Attack Damage/Speed attributes. By default, increasing your attack damage/speed is not reflected in the tooltip of these attributes - PlayerEx fixes this, but offers the option to choose between different solutions: 1. Does not fix the issue and leaves tooltips alone, i.e. if you had 5 attack damage, the tooltip of a sword would not show this. This option is available in the event that you are playing with another mod that changes tooltips, and would otherwise be incompatible.). 2. Displays attack damage/speed the same way attributes are displayed on tooltips, and only shows modifier values. 3. Displays the attack damage/speed in the vanilla way, but fixes the values so that they reflect the player's values.","title":"Config Options"},{"location":"playerex/in-game-content/#commands","text":"Command Function /playerex levelup <player> [amount] Levels the input player up by the input amount. /playerex refund <player> [amount] Gives the input player the input number of refund points. /playerex reset <player> Resets all attributes and skill points on the input player to their defaults. /playerex skillAttribute <player> <attribute> <requires skill points> Skills the input attribute, provided the player has a Skill Point available if the final boolean argument is true, or regardless otherwise. /playerex refundAttribute <player> <attribute> <requires refund points> Refunds the input attribute, provided the player has a Refund Point available if the final boolean argument is true, or regardless otherwise. Also see commands available with Offline Player Cache , which is included with PlayerEx.","title":"Commands"},{"location":"playerex/textplaceholderapi/","text":"Since version 3.0.2 , PlayerEx supports Text Placeholder API and includes three text placeholders. Provided Placeholders \u00b6 Placeholder Online Status Result %playerex:level% Online Players Only This displays the player's current level attribute value. %playerex:name_top/x% Offline and Online Players Only This displays the player's name whose level is the highest in the current world; where x represents the relative position of the player in terms of level. For example: for a player with the highest level, x would be 1; for the player with the second highest level, x would be 2, and so on. The name displayed is provided by GameProfile#getName . %playerex:level_top/x% Offline and Online Players Only This displays the player's level whose level is the highest in the current world; where x represents the relative position of the player in terms of level. For example: for a player with the highest level, x would be 1; for the player with the second highest level, x would be 2, and so on. The value displayed is provided by LivingEntity#getAttributeValue . Notes \u00b6 When a player leaves a world (disconnects) , PlayerEx caches that player's UUID , Name and Level . These values are used by the server when providing placeholders for offline players, whereas for online players the current/life value is provided instead of the cached one. Upon joining a world (reconnecting) that player's cache is removed and their current/live values are used once again. This offline caching functionality is provided by Offline Player Cache - a lighweight library/API mod. PlayerEx ships with it included (jar-in-jar). There may be circumstances where a player has quit a world/server but their cache is still there. To remove their cache, or even just their cached Name or Level , please see here . Also see Text Placeholder API","title":"Text Placeholder API"},{"location":"playerex/textplaceholderapi/#provided-placeholders","text":"Placeholder Online Status Result %playerex:level% Online Players Only This displays the player's current level attribute value. %playerex:name_top/x% Offline and Online Players Only This displays the player's name whose level is the highest in the current world; where x represents the relative position of the player in terms of level. For example: for a player with the highest level, x would be 1; for the player with the second highest level, x would be 2, and so on. The name displayed is provided by GameProfile#getName . %playerex:level_top/x% Offline and Online Players Only This displays the player's level whose level is the highest in the current world; where x represents the relative position of the player in terms of level. For example: for a player with the highest level, x would be 1; for the player with the second highest level, x would be 2, and so on. The value displayed is provided by LivingEntity#getAttributeValue .","title":"Provided Placeholders"},{"location":"playerex/textplaceholderapi/#notes","text":"When a player leaves a world (disconnects) , PlayerEx caches that player's UUID , Name and Level . These values are used by the server when providing placeholders for offline players, whereas for online players the current/life value is provided instead of the cached one. Upon joining a world (reconnecting) that player's cache is removed and their current/live values are used once again. This offline caching functionality is provided by Offline Player Cache - a lighweight library/API mod. PlayerEx ships with it included (jar-in-jar). There may be circumstances where a player has quit a world/server but their cache is still there. To remove their cache, or even just their cached Name or Level , please see here . Also see Text Placeholder API","title":"Notes"}]}